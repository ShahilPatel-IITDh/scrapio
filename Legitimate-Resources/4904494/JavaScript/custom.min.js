/**
 * @license Rangy Inputs, a jQuery plug-in for selection and caret manipulation within textareas and text inputs.
 * 
 * https://github.com/timdown/rangyinputs
 *
 * For range and selection features for contenteditable, see Rangy.

 * http://code.google.com/p/rangy/
 *
 * Depends on jQuery 1.0 or later.
 *
 * Copyright 2014, Tim Down
 * Licensed under the MIT license.
 * Version: 1.2.0
 * Build date: 30 November 2014
 */
(function($) {
    var UNDEF = "undefined";
    var getSelection, setSelection, deleteSelectedText, deleteText, insertText;
    var replaceSelectedText, surroundSelectedText, extractSelectedText, collapseSelection;

    // Trio of isHost* functions taken from Peter Michaux's article:
    // http://peter.michaux.ca/articles/feature-detection-state-of-the-art-browser-scripting
    function isHostMethod(object, property) {
        var t = typeof object[property];
        return t === "function" || (!!(t == "object" && object[property])) || t == "unknown";
    }

    function isHostProperty(object, property) {
        return typeof(object[property]) != UNDEF;
    }

    function isHostObject(object, property) {
        return !!(typeof(object[property]) == "object" && object[property]);
    }

    function fail(reason) {
        if (window.console && window.console.log) {
            window.console.log("RangyInputs not supported in your browser. Reason: " + reason);
        }
    }

    function adjustOffsets(el, start, end) {
        if (start < 0) {
            start += el.value.length;
        }
        if (typeof end == UNDEF) {
            end = start;
        }
        if (end < 0) {
            end += el.value.length;
        }
        return { start: start, end: end };
    }

    function makeSelection(el, start, end) {
        return {
            start: start,
            end: end,
            length: end - start,
            text: el.value.slice(start, end)
        };
    }

    function getBody() {
        return isHostObject(document, "body") ? document.body : document.getElementsByTagName("body")[0];
    }

    $(document).ready(function() {
        var testTextArea = document.createElement("textarea");

        getBody().appendChild(testTextArea);

        if (isHostProperty(testTextArea, "selectionStart") && isHostProperty(testTextArea, "selectionEnd")) {
            getSelection = function(el) {
                var start = el.selectionStart, end = el.selectionEnd;
                return makeSelection(el, start, end);
            };

            setSelection = function(el, startOffset, endOffset) {
                var offsets = adjustOffsets(el, startOffset, endOffset);
                el.selectionStart = offsets.start;
                el.selectionEnd = offsets.end;
            };

            collapseSelection = function(el, toStart) {
                if (toStart) {
                    el.selectionEnd = el.selectionStart;
                } else {
                    el.selectionStart = el.selectionEnd;
                }
            };
        } else if (isHostMethod(testTextArea, "createTextRange") && isHostObject(document, "selection") &&
                   isHostMethod(document.selection, "createRange")) {

            getSelection = function(el) {
                var start = 0, end = 0, normalizedValue, textInputRange, len, endRange;
                var range = document.selection.createRange();

                if (range && range.parentElement() == el) {
                    len = el.value.length;

                    normalizedValue = el.value.replace(/\r\n/g, "\n");
                    textInputRange = el.createTextRange();
                    textInputRange.moveToBookmark(range.getBookmark());
                    endRange = el.createTextRange();
                    endRange.collapse(false);
                    if (textInputRange.compareEndPoints("StartToEnd", endRange) > -1) {
                        start = end = len;
                    } else {
                        start = -textInputRange.moveStart("character", -len);
                        start += normalizedValue.slice(0, start).split("\n").length - 1;
                        if (textInputRange.compareEndPoints("EndToEnd", endRange) > -1) {
                            end = len;
                        } else {
                            end = -textInputRange.moveEnd("character", -len);
                            end += normalizedValue.slice(0, end).split("\n").length - 1;
                        }
                    }
                }

                return makeSelection(el, start, end);
            };

            // Moving across a line break only counts as moving one character in a TextRange, whereas a line break in
            // the textarea value is two characters. This function corrects for that by converting a text offset into a
            // range character offset by subtracting one character for every line break in the textarea prior to the
            // offset
            var offsetToRangeCharacterMove = function(el, offset) {
                return offset - (el.value.slice(0, offset).split("\r\n").length - 1);
            };

            setSelection = function(el, startOffset, endOffset) {
                var offsets = adjustOffsets(el, startOffset, endOffset);
                var range = el.createTextRange();
                var startCharMove = offsetToRangeCharacterMove(el, offsets.start);
                range.collapse(true);
                if (offsets.start == offsets.end) {
                    range.move("character", startCharMove);
                } else {
                    range.moveEnd("character", offsetToRangeCharacterMove(el, offsets.end));
                    range.moveStart("character", startCharMove);
                }
                range.select();
            };

            collapseSelection = function(el, toStart) {
                var range = document.selection.createRange();
                range.collapse(toStart);
                range.select();
            };
        } else {
            getBody().removeChild(testTextArea);
            fail("No means of finding text input caret position");
            return;
        }

        // Clean up
        getBody().removeChild(testTextArea);

        function getValueAfterPaste(el, text) {
            var val = el.value, sel = getSelection(el), selStart = sel.start;
            return {
                value: val.slice(0, selStart) + text + val.slice(sel.end),
                index: selStart,
                replaced: sel.text
            };
        }
        
        function pasteTextWithCommand(el, text) {
            el.focus();
            var sel = getSelection(el);

            // Hack to work around incorrect delete command when deleting the last word on a line
            setSelection(el, sel.start, sel.end);
            if (text == "") {
                document.execCommand("delete", false, null);
            } else {
                document.execCommand("insertText", false, text);
            }

            return {
                replaced: sel.text,
                index: sel.start
            };
        }

        function pasteTextWithValueChange(el, text) {
            el.focus();
            var valueAfterPaste = getValueAfterPaste(el, text);
            el.value = valueAfterPaste.value;
            return valueAfterPaste;
        }

        var pasteText = function(el, text) {
            var valueAfterPaste = getValueAfterPaste(el, text);
            try {
                var pasteInfo = pasteTextWithCommand(el, text);
                if (el.value == valueAfterPaste.value) {
                    pasteText = pasteTextWithCommand;
                    return pasteInfo;
                }
            } catch (ex) {
                // Do nothing and fall back to changing the value manually
            }
            pasteText = pasteTextWithValueChange;
            el.value = valueAfterPaste.value;
            return valueAfterPaste;
        };

        deleteText = function(el, start, end, moveSelection) {
            if (start != end) {
                setSelection(el, start, end);
                pasteText(el, "");
            }
            if (moveSelection) {
                setSelection(el, start);
            }
        };

        deleteSelectedText = function(el) {
            setSelection(el, pasteText(el, "").index);
        };

        extractSelectedText = function(el) {
            var pasteInfo = pasteText(el, "");
            setSelection(el, pasteInfo.index);
            return pasteInfo.replaced;
        };

        var updateSelectionAfterInsert = function(el, startIndex, text, selectionBehaviour) {
            var endIndex = startIndex + text.length;
            
            selectionBehaviour = (typeof selectionBehaviour == "string") ?
                selectionBehaviour.toLowerCase() : "";

            if ((selectionBehaviour == "collapsetoend" || selectionBehaviour == "select") && /[\r\n]/.test(text)) {
                // Find the length of the actual text inserted, which could vary
                // depending on how the browser deals with line breaks
                var normalizedText = text.replace(/\r\n/g, "\n").replace(/\r/g, "\n");
                endIndex = startIndex + normalizedText.length;
                var firstLineBreakIndex = startIndex + normalizedText.indexOf("\n");
                
                if (el.value.slice(firstLineBreakIndex, firstLineBreakIndex + 2) == "\r\n") {
                    // Browser uses \r\n, so we need to account for extra \r characters
                    endIndex += normalizedText.match(/\n/g).length;
                }
            }

            switch (selectionBehaviour) {
                case "collapsetostart":
                    setSelection(el, startIndex, startIndex);
                    break;
                case "collapsetoend":
                    setSelection(el, endIndex, endIndex);
                    break;
                case "select":
                    setSelection(el, startIndex, endIndex);
                    break;
            }
        };

        insertText = function(el, text, index, selectionBehaviour) {
            setSelection(el, index);
            pasteText(el, text);
            if (typeof selectionBehaviour == "boolean") {
                selectionBehaviour = selectionBehaviour ? "collapseToEnd" : "";
            }
            updateSelectionAfterInsert(el, index, text, selectionBehaviour);
        };

        replaceSelectedText = function(el, text, selectionBehaviour) {
            var pasteInfo = pasteText(el, text);
            updateSelectionAfterInsert(el, pasteInfo.index, text, selectionBehaviour || "collapseToEnd");
        };

        surroundSelectedText = function(el, before, after, selectionBehaviour) {
            if (typeof after == UNDEF) {
                after = before;
            }
            var sel = getSelection(el);
            var pasteInfo = pasteText(el, before + sel.text + after);
            updateSelectionAfterInsert(el, pasteInfo.index + before.length, sel.text, selectionBehaviour || "select");
        };

        function jQuerify(func, returnThis) {
            return function() {
                var el = this.jquery ? this[0] : this;
                var nodeName = el.nodeName.toLowerCase();

                if (el.nodeType == 1 && (nodeName == "textarea" ||
                        (nodeName == "input" && /^(?:text|email|number|search|tel|url|password)$/i.test(el.type)))) {
                    var args = [el].concat(Array.prototype.slice.call(arguments));
                    var result = func.apply(this, args);
                    if (!returnThis) {
                        return result;
                    }
                }
                if (returnThis) {
                    return this;
                }
            };
        }

        $.fn.extend({
            getSelection: jQuerify(getSelection, false),
            setSelection: jQuerify(setSelection, true),
            collapseSelection: jQuerify(collapseSelection, true),
            deleteSelectedText: jQuerify(deleteSelectedText, true),
            deleteText: jQuerify(deleteText, true),
            extractSelectedText: jQuerify(extractSelectedText, false),
            insertText: jQuerify(insertText, true),
            replaceSelectedText: jQuerify(replaceSelectedText, true),
            surroundSelectedText: jQuerify(surroundSelectedText, true)
        });
    });
})(jQuery);
/**
 * Created by boss on 2/19/17.
 */

$(function () {
    var $scroll_wrapper = $('.scroll-top-wrapper');
    $(document).on( 'scroll', function(){
        if ($(window).scrollTop() > 100) {
            $scroll_wrapper.addClass('show');
        } else {
            $scroll_wrapper.removeClass('show');
        }
    });
    $scroll_wrapper.on('click', scrollToTop);
    $('.category-shelf-window').on('scroll', function (e) {
        $('img.lazy').lazy({
            threshold: 200
        });
    });
    $('.lazy').Lazy(
        {
            // appendScroll: $('.category-shelf-window'),
            threshold: 200
        }
    );
});

function scrollToTop() {
    verticalOffset = typeof(verticalOffset) != 'undefined' ? verticalOffset : 0;
    element = $('body');
    offset = element.offset();
    offsetTop = offset.top;
    $('html, body').animate({scrollTop: offsetTop}, 500, 'linear');
}

$(function () {

    if ($("#tree").length > 0) {
        $.ajax({
            type: "GET",
            url: '/thread_tree/'+$(".container.thread").data('thread-id'),
            success: function (data) {
                $('#tree').html(data);
            },
            error: function () {
                $('#tree').html(data);
            }
        });
    }
});

var global_selected,
    forms_opened = [];

if (typeof Hermes == 'undefined') {
    var Hermes = {};
}

var Article = function () {
    var self = {};
    self.post_details = JSON.parse($('#post_details').text());
    self.init = function () {
        self.bindLoadQuotesButton();
        self.bindLoadSignatureButton();
        self.bindLinks();
        self.dispatchAjax();
        self.initializeLightBoxes();
        self.bindAuthorDropDown();
        self.bindCommentVoteButtons();
    };

    self.bindAuthorDropDown = function () {
        $(".author-block .dropdown").on("show.bs.dropdown", function(event){
            let $this = $(this),
                article_id = $this.data('article-id'),
                dropdownMenu = $this.children('.dropdown-menu'),
                csrf = window.Laravel.csrfToken;
            $.ajax({
                method: "POST",
                url: "/article/author",
                data: {"article_id": article_id, csrfToken: csrf},
                success: function (msg) {
                    dropdownMenu.html(msg).show('slow');
                }
            });
        });
    }

    self.initializeLightBoxes = function () {
        var $lightboxContainers = $("[class*='lightbox-article-']");
        $lightboxContainers.each(function () {
            var $links = $(this).find('a.article-image');
            if ($links.length > 0) {
                $links.simpleLightbox({sourceAttr: 'href'});
            }
        });
    };

    self.bindLoadQuotesButton = function () {
        $('.load-quotes').on('click', function () {
            var me = $(this),
                group_id = me.data('group-id'),
                article_id = me.data('article-id'),
                csrf = window.Laravel.csrfToken;

            $.ajax({
                method: "POST",
                url: "/quotes",
                data: { article_id: article_id},
                success: function (msg) {
                    var article = me.parents('div.article-body');
                    article.html(msg).show('slow');
                },
                error: function (xhr, status, error) {
                    var msg;
                    me.parents('div').prepend('<div class="article-message"></div>');
                    if (xhr.status == 429) {
                        msg = '<div class="alert alert-warning text-center">Slow down, cowboy! You are hitting the button too fast. Let us catch our breath.</div>';
                    } else if (xhr.status == 409) {
                        msg = '<div class="alert alert-warning text-center">' + xhr.responseText + '</div>';
                    } else if (xhr.status == 500) {
                        msg = '<div class="alert alert-danger">Hmm... Something went wrong, will be sure to have it checked but not right this minute, sorry.</div>';
                    } else if (xhr.status == 404) {
                        msg= '<div class="alert alert-danger">Can you believe it?! We are having a hard time finding where to load the quotes from! We are probably playing with the site right this moment. Please try again in a minute.</div>';
                    } else {
                        msg = '<div class="alert alert-danger">Something really, really bad happened, and we are not even sure what that is. We\'ll get to the bottom of it eventually, but you are probably not going to be able to load the quotes today, sorry ...</div>';
                    }
                    me.siblings('.article-message').slideDown().html(msg).delay(5000).slideUp();
                }
            });
        });
    };
    self.bindLoadSignatureButton = function () {
        $('.load-signature').on('click', function () {
            var me = $(this),
                group_id = me.data('group-id'),
                article_id = me.data('article-id'),
                csrf = window.Laravel.csrfToken;

            $.ajax({
                method: "POST",
                url: "/signature",
                data: { group_id: group_id, article_id: article_id, csrfToken: csrf},
                success: function (msg) {
                    var signature = me.parents('div.signature');
                    signature.html("<pre>-- \n" + msg + "</pre>").show('slow');
                },
                error: function (xhr, status, error) {
                    var msg;
                    me.parents('div').prepend('<div class="article-message"></div>');
                    if (xhr.status == 429) {
                        msg = '<div class="alert alert-warning text-center">Slow down, cowboy! You are hitting the button too fast. Let us catch our breath.</div>';
                    } else if (xhr.status == 409) {
                        msg = '<div class="alert alert-warning text-center">' + xhr.responseText + '</div>';
                    } else if (xhr.status == 500) {
                        msg = '<div class="alert alert-danger">Hmm... Something went wrong, will be sure to have it checked but not right this minute, sorry.</div>';
                    } else if (xhr.status == 404) {
                        msg= '<div class="alert alert-danger">Can you believe it?! We are having a hard time finding where to load the signature from! We are probably playing with the site right this moment. Please try again in a minute.</div>';
                    } else {
                        msg = '<div class="alert alert-danger">Something really, really bad happened, and we are not even sure what that is. We\'ll get to the bottom of it eventually, but you are probably not going to be able to load the signature today, sorry ...</div>';
                    }
                    me.siblings('.article-message').slideDown().html(msg).delay(5000).slideUp();
                }
            });
        });
    };

    self.bindLinks = function () {
        self.link_properties = [];
        self.$article_links =$('div.article-link');
        self.$article_links.each(function () {
         var $this = $(this),
             group_id = $this.data('group-id'),
             article_id = $this.data('article-id'),
             url = $this.data('url');
         self.link_properties[url] = {
             'group_id' : group_id,
             'article_id': article_id
         };
      });
    };
    self.dispatchAjax = function () {
        for (var key in self.link_properties){
            var csrf = window.Laravel.csrfToken,
                val = self.link_properties[key];
            $.ajax({
                method: "POST",
                url: "/link",
                thisUrl: key,
                data: {group_id: val.group_id, article_id: val.article_id, url: key, csrfToken: csrf},
                success: function (msg) {
                    var currentUrl = this.thisUrl;
                    self.$article_links.each(function () {
                        var $this = $(this),
                            url = $this.data('url');
                        if (url === currentUrl) {
                            $this.html(msg).show('slow');
                        }
                    });
                },
                error: function (xhr, status, error) {
                    var msg,
                        link = $('div.article-link[data-url="' + this.thisUrl + '"]');
                    msg = '<div class="alert alert-warning text-center">Error Getting Link Data<br>' + xhr.responseText + '</div>';
                    link.slideDown().html(msg).delay(10000).slideUp();
                }
            });
        };
    };
    self.bindCommentVoteButtons = function () {
      let voteButtons = document.getElementsByClassName('comment-vote');
      Array.from(voteButtons).forEach(function (button) {
          button.addEventListener('click', (event) => {
              let data = {
                  article_id: button.dataset.article_id,
                  group_id : button.dataset.group_id,
                  vote : button.dataset.vote,
                  csrfToken: window.Laravel.csrfToken
              }
              $.ajax({
                  method: "POST",
                  url: "/comment_vote",
                  data: data,
                  success: function (msg) {
                        // fill icon with solid color
                      let voteObj = JSON.parse(msg);
                      let vote = voteObj.vote;
                      let icon = button.querySelector('svg');
                      let antIcon;
                      if (vote === 1) {
                          antIcon = button.nextElementSibling.querySelector('svg');
                      } else {
                          antIcon = button.previousElementSibling.querySelector('svg');
                      }
                      icon.setAttribute('data-prefix', 'fa');
                      antIcon.setAttribute('data-prefix', 'far');
                  },
                  error: function (xhr, status, error) {
                      let msg = '<div class="alert alert-warning text-center">Error submitting your vote, please try again in a few minutes</div>';
                      $(button).parents('article').prepend(msg).slideDown().delay(5000).slideUp();
                  }
          })
      });
    });
    }

    self.init();
    return self;
};

/**
 * Created on 8/4/15.
 * Code specific to post forms
 */
var global_selected,
    forms_opened = [];

if (typeof Hermes == 'undefined') {
    var Hermes = {};
}

var Posting = function () {
    var self = {};
    self.post_details = JSON.parse($('#post_details').text());
    $.ajaxSetup({
        headers: {
            'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
        }
    });
    self.init = function () {
        if ("ga" in window && typeof ga.getAll === 'function') {
            self.tracker = ga.getAll()[0];
        }
        self.bindPostNewButton();
        self.bindReplyTextArea();
    };

    self.bindPostNewButton = function () {
        $('.post-new-btn').on('click', function (e) {
            var $form_container = $('.post-form-modal'),
                uuid = Cookies.get('uuid') ? Cookies.get('uuid') : '';
            $.post("/new_post_form_data", {
                uuid: uuid
            }).done(function (data) {
                var $this_form,
                   data_obj = eval(data);
                $form_container.html(data_obj.post_form_data);
                $this_form = $form_container.find('form.post-form');
                $(".new-post-groups").select2({
                    placeholder: "Select the forum to post to",
                    theme: "bootstrap4",
                    width: 'calc(100% - 45px)'
                }).select2('val', self.post_details.group_id);
                self.bindPostButtonClick($this_form);
                self.bindToolButtons($this_form);
                self.bindImageButton($this_form);
                self.bind_email_fields();
                self.sendAnalytics('new_form', 'New Post Form Opened');
                $.getScript(data_obj.post_file_script).done(function (){
                    self.bindImageUploadPanel($this_form);
                });
            });
        });
    };

    self.sendAnalytics = function (action,label, value = 0) {
        if (self.tracker) {
            self.tracker.send("event", "posts", action, label);
        } else {
            // sending via GTM pass-through
            // https://mixedanalytics.com/blog/ga-gtm-event-tracking-pass-through-datalayer/
            window.dataLayer = window.dataLayer || [];
            dataLayer.push({
                'event': 'eventTracking',
                'category': 'posts',
                'action': action,
                'label': label
            });
        }
    }

    self.bindReplyTextArea = function () {
        $('.reply-txtarea').on('click', function () {
            const me = $(this),
                uuid = Cookies.get('uuid') ? Cookies.get('uuid') : '';
            if (me.data('opened')) {
                return false;
            }
            let id = me.children('textarea').data('article-id'),
                $this_form = me.closest('.post-form'),
                txtarea = me.children("textarea"),
                input_group_append = txtarea.siblings(".input-group-append"),
                user_data_section = $(".reply-form[data-article-id=" + id + "]").find('.user_data_group'),
                $post_toolbar_group = me.closest('form').find('.post-toolbar-group'),
                wrapper = me.closest('div.reply-txt'),
                existing = txtarea.val(),
                reply;
            wrapper.addClass('expanded');
            if (global_selected) {
                reply = global_selected.replace(/^(.+)/gm, "> $1");
                var lines = reply.split(/\r|\r\n|\n/);
                var count = lines.length;
                txtarea.attr('rows', count + 2);
                if (existing == '') {
                    txtarea.val(reply + "\n");
                }
            }
            me.prepend('<div class="loading"><i class="fa fa-spinner fa-spin"></i> Loading form data ...</div>')
            me.children('span.input-group-addon').html('<i class="fa fa-pencil fa-fw"></i>');
            $.post("/post_form_data", {
                uuid: uuid
            })
                .done(function (data) {
                    var data_obj = eval(data);
                    user_data_section.html(data_obj.post_form_data);
                    $post_toolbar_group.html(data_obj.post_toolbar_group);
                    $.getScript(data_obj.post_file_script).done(function (){
                        self.bindImageUploadPanel($this_form);
                    });
                    me.find('div.loading').remove();
                    self.bind_email_fields();
                    $post_toolbar_group.collapse().show('slow');
                    user_data_section.parent().collapse().show('slow');
                    self.bindPostButtonClick($this_form);
                    self.bindToolButtons($this_form);
                    self.bindImageButton($this_form);
                    me.attr('data-opened', 1);
                    txtarea.attr('rows', 10);
                    input_group_append.remove();
                    self.sendAnalytics('reply_form', 'Reply Form Opened');
                });

            if (existing == '') {
                txtarea.attr('placeholder', 'Text of your reply goes here. Please be helpful and polite to other users!');
            }
            txtarea.focus();
        });
    };

    self.bindToolButtons = function ($this_form) {
        const textarea = $this_form.find('textarea');
        // Bold
        $this_form.on('click', '.post-tools-bold', function () {
            textarea.surroundSelectedText('*', '*');
        });

        // Italics
        $this_form.on('click', '.post-tools-italic', function () {
            textarea.surroundSelectedText('/', '/');
        });

        // Underline
        $this_form.on('click', '.post-tools-underline', function () {
            textarea.surroundSelectedText('_', '_');
        });

        // H2
        $this_form.on('click', '.post-tools-h2', function () {
            textarea.surroundSelectedText('[H2]', '[/H2]');
        });

        // H3
        $this_form.on('click', '.post-tools-h3', function () {
            textarea.surroundSelectedText('[H3]', '[/H3]');
        });

        // OL
        $this_form.on('click', '.post-tools-ol', function () {
            self.addOrderedList(textarea);
        });

        // UL
        $this_form.on('click', '.post-tools-ul', function () {
            self.addUnorderedList(textarea);
        });

    };

    self.addOrderedList = function(textarea) {
        textarea = textarea[0];
        var selectionStart = textarea.selectionStart;
        var selectionEnd = textarea.selectionEnd;
        var sel = textarea.value.substring(selectionStart, selectionEnd);
        const lines = sel.split('\n');
        const numberedLines = lines.map((line, index) => `${index + 1}. ${line}`);
        const numberedText = numberedLines.join('\n');
        const textBeforeSelection = textarea.value.substring(0, selectionStart);
        const textAfterSelection = textarea.value.substring(selectionEnd, textarea.value.length);
        const updatedText = textBeforeSelection + numberedText + textAfterSelection;
        textarea.value = updatedText;
        const newCursorPosition = selectionStart + numberedText.length;
        textarea.setSelectionRange(newCursorPosition, newCursorPosition);
    }

    self.addUnorderedList = function(textarea) {
        textarea = textarea[0];
        var selectionStart = textarea.selectionStart;
        var selectionEnd = textarea.selectionEnd;
        var sel = textarea.value.substring(selectionStart, selectionEnd);
        const lines = sel.split('\n');
        const builleterLines = lines.map((line, index) => `+ ${line}`);
        const bulletedText = builleterLines.join('\n');
        const textBeforeSelection = textarea.value.substring(0, selectionStart);
        const textAfterSelection = textarea.value.substring(selectionEnd, textarea.value.length);
        const updatedText = textBeforeSelection + bulletedText + textAfterSelection;
        textarea.value = updatedText;
        const newCursorPosition = selectionStart + bulletedText.length;
        textarea.setSelectionRange(newCursorPosition, newCursorPosition);
    }

    self.bindImageButton = function ($this_form) {
        // Image
        $this_form.on('click', '.post-tools-image', function () {
            var me = $(this),
                $form = me.closest('form'),
                $upload = $form.find('div.multiupload'),
                $upload_input = $upload.find('input.file-upload');
            $upload.collapse('toggle');
        });
    };

    self.bindImageUploadPanel = function ($this_form) {
        var $image_panel = $this_form.find('div.multiupload'),
            $post_toolbar_group = $image_panel.closest('.post-toolbar-group'),
            $newPostModal = $('#newPostModal');
        $image_panel.on('show.bs.collapse', function () {
            $post_toolbar_group.addClass('active');
            if($newPostModal.hasClass('show')) {
                $newPostModal.modal('handleUpdate');
            }
        });
        $image_panel.on('hide.bs.collapse', function () {
            $post_toolbar_group.removeClass('active');
            if($newPostModal.hasClass('show')) {
                $newPostModal.modal('handleUpdate');
            }
        });
        self.initFileInput($this_form);
    };

    self.initFileInput = function ($this_form) {
        var $upload_input = $this_form.find('input.file-upload'),
            $post_flash = $this_form.find('div.post-flash'),
            action_type = $this_form.find('button.post-button').data('action'),
            form_data;
        $upload_input.fileinput({
            'showUpload': false,
            'previewFileType': 'any',
            'maxFileCount': 10,
            'uploadAsync': false,
            'showAjaxErrorDetails': false,
            'showPreview': true,
            'uploadUrl': '/api/x/post',
            uploadExtraData: function () {
                form_data = self.getReturnData($this_form);
                return form_data;
            }
        }).on('filebatchuploadsuccess', function (event, data, previewId, index) {
            var response = data.response.message,
                uuid = data.response.uuid,
                alert;
            $post_flash.html('<div class="alert alert-success"><a href="#" class="close" data-dismiss="alert">&times;</a>' + response + '</div>');
            alert = $post_flash.find('.alert-success');
            if (alert.length > 0) {
                alert.delay(10000).slideUp('slow');
            }
            setTimeout(function () {
                $('#newPostModal').find('.close').trigger('click');
                $this_form.find('.reply-form').removeClass('show');
                $this_form.find('.post-toolbar-group').removeClass('show');
            }, 10000);

                if (action_type === 'reply') {
                    self.sendAnalytics('reply', 'Reply Post Submitted');
                } else {
                    self.sendAnalytics('new', 'New Post Submitted');
                }

            Cookies.remove('draft_exists', {path: '/'});
            $this_form.find('textarea').val(''); // it is safe to delete when storage is implemented
            // $this_form.find('input[name=title]').val('');
            $upload_input.fileinput('clear');
            Cookies.set('uuid', uuid, {path: '/'});

        }).on('filebatchuploaderror', function (event, data, msg) {
            event.stopPropagation();
            event.preventDefault();
            event.stopImmediatePropagation();
            $post_flash.html('<div class="alert alert-danger"><a href="#" class="close" data-dismiss="alert">&times;</a><h3>Server responded with an error:</h3>: <small>' + data.jqXHR.responseJSON.message + '</small></div>');
            return false;
        });
        return false;
    };

    self.getReturnData = function ($post_form) {
        var action_type = $post_form.find('button.post-button').data('action'),
            parent_article_id = $post_form.data('article-id'),
            post_name = $post_form.find('input[name=username]').val(),
            post_email = $post_form.find('input[name=email]').val(),
            post_subject = $post_form.find('input[name=title]').val(),
            post_body = $post_form.find('textarea').val(),
            post_group_id,
            post_uuid = $post_form.find('input[name=uuid]').val(),
            post_notify,
            data;

        $post_form.find('input[name=q_notify]').is(':checked') ? post_notify = 1 : post_notify = 0;
        if (action_type != 'reply') {
            post_group_id = $post_form.find('select[name=grp_id]').val();
        } else {
            post_group_id = self.post_details.group_id;
        }
        data = {
            username: post_name,
            subject: post_subject,
            body: post_body,
            email: post_email,
            group_id: post_group_id,
            notify: post_notify
        };

        if (typeof parent_article_id !== 'undefined') {
            data.parent_article_id = parent_article_id;
        }
        if (typeof post_uuid !== 'undefined') {
            data.post_uuid = post_uuid;
        }

        return data;
    };

    self.bind_email_fields = function () {

        $('.user_email').focusout(function () {
            var me = $(this),
                spinner = me.next().find('.fa-envelope'),
                email = me.val();
            if (!checkEmail(email, true)) {
                me.popover('dispose');
                me.popover({
                    content: email + " appears to be a malformed email",
                    trigger: 'manual',
                    placement: 'auto'
                });
                me.popover('show');
                me.closest('.input-group').addClass('has-error');
                spinner.addClass('fa-spin');
                me.focus();
                return;
            } else if (email != '') {
                var encodedEmail = encodeURIComponent(email);
                spinner.addClass('fa-spin');
                $.post("/api/x/email_valid", {user_email: encodedEmail})
                    .done(function (data) {
                        if (data == 0) {
                            me.popover('dispose');
                            me.popover({
                                content: email + " appears to have a misspelled domain",
                                trigger: 'manual',
                                placement: 'auto'
                            });
                            me.popover('show');
                            me.closest('.input-group').addClass('has-error');
                            me.focus();
                        } else if (data == 1) {
                            me.popover('dispose');
                            $('.fa-spin').removeClass('fa-spin');
                            me.closest('.input-group').removeClass('has-error');
                        }
                    });
            }

        });
        $(".user_email").on('change', function () {
            $(this).closest('.input-group').removeClass('has-error');
            Cookies.set('draft_exists', '1', {expires: 1, path: '/'});
        });
        $(".user_name").on('change', function () {
            $(this).closest('.input-group').removeClass('has-error');
            Cookies.set('draft_exists', '1', {expires: 1, path: '/'});
        });
        $(".reply-txtarea").on('change', function () {
            $(this).closest('.input-group').removeClass('has-error');
            Cookies.set('draft_exists', '1', {expires: 1, path: '/'});
        });
        $('input[name=title]').on('change', function () {
            Cookies.set('draft_exists', '1', {expires: 1, path: '/'});
        });
        $('.new-post-txtarea').on('change', function () {
            Cookies.set('draft_exists', '1', {expires: 1, path: '/'});
        });

    };

    self.bindPostButtonClick = function ($post_form) {
        var $post_button = $post_form.find('.post-button');

        $post_button.on('click', function (e) {
            var $upload_input = $post_form.find('input.file-upload'),
                $post_flash = $post_form.find('div.post-flash');

            e.stopPropagation();
            e.preventDefault();
            e.stopImmediatePropagation();
            if (!checkForm($post_form)) {
                return false;
            }
            $post_flash.html('<div class="text-center"><i class="fa fa-spinner fa-pulse fa-3x"></i></div>');
            $upload_input.fileinput('upload');
            return true;
        });
    };

    self.init();
    return self;
};

$(document).ready(function () {
    Hermes.Posting = Posting();
});


$(document).ready(function () {
    Cookies.remove('draft_exists', {path: '/'});
    $(window).bind("beforeunload", function (event) {
        if (Cookies.get('draft_exists') == 1) return "You have unsaved changes";
    });

    $(".new-post-groups").select2({
        placeholder: "Select the forum to post to",
        dropdownParent: $('#newPostModal .modal-content')
    });

    $(".new-post-groups").on("select2:open", function() {
        $(".select2-search--dropdown .select2-search__field").attr("placeholder", "Search the forum to post to ...");
    });
    $(".new-post-groups").on("select2:close", function() {
        $(".select2-search--dropdown .select2-search__field").attr("placeholder", null);
    });

    $('.reply-txtarea').find('.input-group-append').on('mouseover', function () {
        $(this).css('cursor', 'pointer');
    })

    //Set the carousel options
    $('#quote-carousel').carousel({
        pause: true,
        interval: 6000,
    });

});


function checkEmail(email, empty_is_valid) {
    if (email == '' && empty_is_valid) {
        return true; // empty is valid
    }
    var filter = /^([a-zA-Z0-9_\.\-])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})+$/;
    if (!filter.test(email)) {
        return false;
    }
    return true;
}


function checkForm(post_form) {
    var post_subject_input = post_form.find('input[name=title]');
    var post_name_input = post_form.find('input[name=name]');
    var post_email_input = post_form.find('input[name=email]');
    var post_body_input = post_form.find('textarea');
    var post_subject = post_subject_input.val();
    var post_name = post_name_input.val();
    var post_email = post_email_input.val();
    var post_body = post_body_input[0].value;
    var post_flash = post_form.find('div.post-flash');

    $('.has-error').each(function () {
        $(this).removeClass('has-error');
    });

    if (post_subject == '') {
        post_subject_input.closest('.input-group').addClass('has-error');
    }
    if (post_body == '') {
        post_body_input.closest('.input-group').addClass('has-error');
    }
    if (post_name == '') {
        post_name_input.closest('.input-group').addClass('has-error');
    }
    if (post_email == '') {
        post_email_input.closest('.input-group').addClass('has-error');
    }
    if (post_email == '' || post_name == '' || post_body == '' || post_subject == '') {
        post_flash.html('<div class="alert alert-danger"><a href="#" class="close" data-dismiss="alert">&times;</a><h3>Sorry, cannot post</h3>Neither subject of the message nor the body, name or email of the poster can be empty</div>');
        return false;
    }

    return true;
}


function getSelected() {
    var text = "";
    if (window.getSelection
        && window.getSelection().toString()
        && $(window.getSelection()).attr('type') != "Caret") {
        global_selected = window.getSelection().toString();
        return text;
    }
    if (document.getSelection
        && document.getSelection().toString()
        && $(document.getSelection()).attr('type') != "Caret") {
        global_selected = document.getSelection().toString();
        return true;
    } else {
        var selection = document.selection && document.selection.createRange();

        if (!(typeof selection === "undefined")
            && selection.text
            && selection.text.toString()) {
            global_selected = selection.text.toString();
            return true;
        }
    }

    return false;
}

var articles = document.getElementsByClassName('article-body');
var testDivs = Array.prototype.filter.call(articles, function (testElement) {
    testElement.addEventListener('mouseup', getSelected, true);
});

$(function () {
    // manual carousel controls
    $('.next').click(function(){ $('.carousel').carousel('next');return false; });
    $('.prev').click(function(){ $('.carousel').carousel('prev');return false; });
    $('.carousel').on('slide.bs.carousel', function(ev) {
        var lazy;
        lazy = $(ev.relatedTarget);
        lazy.css("background-image", "url('" + lazy.data('src') + "')");
        lazy.removeAttr("data-src");
    });
});

$(function () {
    $.ajax({
        type: "GET",
        url: '/user_navbar',
        success: function (data) {
            var $navbarSection = $('nav.fixed-top').find('ul.navbar-nav');
            $navbarSection.prepend(data).fadeIn('slow');
        },
        error: function () {

        }
    });
});
