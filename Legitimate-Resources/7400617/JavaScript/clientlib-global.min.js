$(function() {
  /* utility functions can be written here*/ 
   if($(".rating-stars").length > 0) {
    setTimeout(function () { 
      var elem = $(".rating-stars").find(".bv_main_container");
        elem.attr("tabindex",0);
        elem.attr("role","button");
      },1000);
    }
  $(".rating-stars").on("click", function () {
       //setTimeout(function () {           
           if(!$(this).hasClass("no-scroll-review") && $("#BVRRContainer").length){    
            $("body,html").animate(
              {
                scrollTop: $("#BVRRContainer").offset().top-100
              },
              800
            );
          }
       //},100);
  });
    
});
$(function () {
	var searchLoaded = false;
	var searchLoading = false;

	$("button.site-search.modal, button.white.modal").on("click", function () {
		if (!searchLoaded && !searchLoading && !alreadyLoadedFromPage()) {
			searchLoading = true;

			var jsElm = document.createElement("script");
			jsElm.type = "module";
			jsElm.src = "https://static.cloud.coveo.com/atomic/v2/atomic.esm.js";

			var jsElm1 = document.createElement("script");
			jsElm1.type = "module";
			jsElm1.src = "/etc.clientlibs/reimagine/clientlibs/clientlib-search.js";

			document.body.appendChild(jsElm);
			document.body.appendChild(jsElm1);

			searchLoading = false;
			searchLoaded = true;
		}
	});

	function alreadyLoadedFromPage() {
		var loaded = (($('script[src="https://static.cloud.coveo.com/atomic/v2/atomic.esm.js"]').length > 0) && ($('script[src="/etc.clientlibs/reimagine/clientlibs/clientlib-search.js"]').length > 0))
		if (loaded) {
			searchLoaded = true;
		}
		return loaded;
	}
});
function _extends() { return (_extends = Object.assign ? Object.assign.bind() : function (t) { for (var i = 1; i < arguments.length; i++) { var e, o = arguments[i]; for (e in o) Object.prototype.hasOwnProperty.call(o, e) && (t[e] = o[e]) } return t }).apply(this, arguments) } var CustomSelect = function (a) { var e = { block: "custom-select", hideCallback: !1, includeValue: !1, keyboard: !0, modifier: !1, placeholder: !1, search: !1, showCallback: !1, transition: 0 }, t = function () { function o(t, i) { this._$select = a(t), this._options = _extends({}, e, "object" == typeof i ? i : {}), this._activeModifier = this._options.block + "--active", this._dropupModifier = this._options.block + "--dropup", this._optionSelectedModifier = this._options.block + "__option--selected", this._keydown = this._keydown.bind(this), this._dropup = this._dropup.bind(this), this._outside = this._outside.bind(this), this._init() } var t = o.prototype; return t.reset = function () { this._$dropdown.hide().empty(), this._$value.off("click"), this._fill() }, t._init = function () { this._$element = a('<div class="' + this._options.block + '">\n           <button class="' + this._options.block + "__option " + this._options.block + '__option--value" type="button"></button>\n           <div class="' + this._options.block + '__dropdown" style="display: none;"></div>\n         </div>'), this._$select.hide().after(this._$element), this._options.modifier && this._$element.addClass(this._options.modifier), this._$value = this._$element.find("." + this._options.block + "__option--value"), this._$dropdown = this._$element.find("." + this._options.block + "__dropdown"), this._fill() }, t._fill = function () { var n = this; this._$values = this._$select.find("option"), this._values = []; var l = this._options.placeholder; a.each(this._$values, function (t, i) { i = a(i).text().trim(); n._values.push(i) }), l && (this._$select.find("[selected]").length ? l = !1 : (this._$value.html(l), this._$select.prop("selectedIndex", -1))), a.each(this._values, function (t, i) { var e = n._$values.eq(t).attr("class"), o = a('<button class="' + n._options.block + '__option" type="button">' + i + "</button>"), s = n._$select.find(":selected"); n._$values.eq(t).attr("disabled") && o.prop("disabled", !0), !s.length && 0 === t || i === s.text().trim() ? (l || n._$value.text(i).removeClass(n._$value.data("class")).removeData("class").addClass(e).data("class", e), (n._options.includeValue || l) && (o.addClass(e), o.toggleClass(n._optionSelectedModifier, n._$values.eq(t).is("[selected]")), n._$dropdown.append(o))) : (o.addClass(e), n._$dropdown.append(o)) }), this._$options = this._$dropdown.find("." + this._options.block + "__option"), this._options.search && this._search(), this._$value.one("click", function (t) { n._show(t) }), this._$value.prop("disabled", !this._$options.length), this._$options.on("click", function (t) { n._select(t) }) }, t._show = function (t) { var i = this; t.preventDefault(), this._dropup(), a(window).on("resize scroll", this._dropup), this._$element.addClass(this._activeModifier), this._$dropdown.slideDown(this._options.transition, function () { i._options.search && (i._$input.focus(), i._options.includeValue && i._scroll()), "function" == typeof i._options.showCallback && i._options.showCallback.call(i._$element[0]) }), setTimeout(function () { a(document).on("touchstart click", i._outside) }, 0), this._$value.one("click", function (t) { t.preventDefault(), i._hide() }), this._options.keyboard && (this._options.index = -1, a(window).on("keydown", this._keydown)) }, t._hide = function () { var i = this; this._options.search && (this._$input.val("").blur(), this._$options.show(), this._$wrap.scrollTop(0)), this._$dropdown.slideUp(this._options.transition, function () { i._$element.removeClass(i._activeModifier).removeClass(i._dropupModifier), "function" == typeof i._options.hideCallback && i._options.hideCallback.call(i._$element[0]), i._$value.off("click").one("click", function (t) { i._show(t) }), a(document).off("touchstart click", i._outside), a(window).off("resize scroll", i._dropup) }), this._options.keyboard && (this._$options.blur(), a(window).off("keydown", this._keydown)) }, t._scroll = function () { var o = this; a.each(this._$options, function (t, i) { var e = a(i); if (e.text() === o._$value.text()) { i = e.position().top, e = o._$wrap.outerHeight() / 2 - e.outerHeight() / 2; return e < i && o._$wrap.scrollTop(i - e), !1 } }) }, t._select = function (t) { var o = this; t.preventDefault(); var i, s = a(t.currentTarget).text().trim(), n = [].concat(this._values); this._$value.text(s).removeClass(this._$value.data("class")), this._$values.prop("selected", !1), a.each(n, function (t, i) { o._options.includeValue || i !== s || n.splice(t, 1), a.each(o._$values, function (t, i) { var e = a(i); e.text().trim() === s && (i = e.attr("class"), e.prop("selected", !0), o._$value.addClass(i).data("class", i)) }) }), this._hide(), this._options.includeValue ? (this._$options.removeClass(this._optionSelectedModifier), a.each(this._$options, function (t, i) { i = a(i); if (i.text().trim() === s) return i.addClass(o._optionSelectedModifier), !1 })) : (this._$options.length > n.length && ((i = this._$options.eq(n.length)).remove(), this._$options = this._$options.not(i), this._$options.length || this._$value.prop("disabled", !0)), a.each(this._$options, function (i, t) { var e = a(t); e.text(n[i]), e.attr("class", o._options.block + "__option"), a.each(o._$values, function () { var t = a(this); t.text().trim() === n[i] && (e.addClass(t.attr("class")), e.prop("disabled", t.prop("disabled"))) }) })), void 0 !== t.originalEvent && this._$select.trigger("change") }, t._search = function () { var t = this; this._$input = a('<input class="' + this._options.block + '__input" autocomplete="off">'), this._$dropdown.prepend(this._$input), this._$options.wrapAll('<div class="' + this._options.block + '__option-wrap"></div>'), this._$wrap = this._$element.find("." + this._options.block + "__option-wrap"), this._$input.on("focus", function () { t._options.index = -1 }), this._$input.on("keyup", function () { var o = t._$input.val().trim(); o.length ? (t._$wrap.scrollTop(0), setTimeout(function () { o === t._$input.val().trim() && a.each(t._$options, function (t, i) { var e = a(i), i = -1 !== e.text().trim().toLowerCase().indexOf(o.toLowerCase()); e.toggle(i) }) }, 300)) : t._$options.show() }) }, t._dropup = function () { var t = this._$element[0].getBoundingClientRect().bottom, t = a(window).height() - t < this._$dropdown.height(); this._$element.toggleClass(this._dropupModifier, t) }, t._outside = function (t) { t = a(t.target); t.parents().is(this._$element) || t.is(this._$element) || this._hide() }, t._keydown = function (t) { var i, e = this._$options.filter(":visible").not("[disabled]"); switch (t.which) { case 40: t.preventDefault(), e.eq(this._options.index + 1).length ? this._options.index += 1 : this._options.index = 0, e.eq(this._options.index).focus(); break; case 38: t.preventDefault(), e.eq(this._options.index - 1).length && 0 <= this._options.index - 1 ? --this._options.index : this._options.index = e.length - 1, e.eq(this._options.index).focus(); break; case 13: case 32: this._$input && this._$input.is(":focus") || (t.preventDefault(), (i = this._$options.add(this._$value).filter(":focus")).trigger("click"), i.is(this._$value) || this._$select.trigger("change"), this._$value.focus()); break; case 27: t.preventDefault(), this._hide(), this._$value.focus() } }, o._jQueryPlugin = function (e) { return this.each(function () { var t = a(this), i = t.data("custom-select"); i ? "reset" === e && i.reset() : "string" != typeof e && (i = new o(this, e), t.data("custom-select", i)) }) }, o }(); return a.fn.customSelect = t._jQueryPlugin, a.fn.customSelect.noConflict = function () { return a.fn.customSelect }, t }($);
var lastScrollTop = 0;

$(function () {
  var $mainNav = $("nav.main-nav");
  var $mobileNavBtn = $(".mobile-nav-hamburger");
  var $subMenuBack = $(".sub-menu-back");
  var $primaryMenu = $(".nav-primary-links > li.has-submenu");
  var $navlistItem = $("ul.nav-sub-items").find("li");
  var $secondaryMenu = $(".nav-secondary-links button");
  var $secondaryMenuItem = $(".secondary-item");
  var $alertBanner = $("section.alert-banner");
  var scrollTopPos = 0;
  var $adaSkipLink = $("a.skip-links");
  var $annotationBtn=$(".annotation-btn");
  $(window).on("resize", function () {
    if (window.matchMedia("screen and (min-width: 991px)").matches) {
      closeMobileNav();
    }

    if (window.matchMedia("screen and (max-width: 991px)").matches) {
      $(".scroll-show").hide("fast");
    }
    if ($(".image-bleed-50-50").length > 0) {
      checkBleed();
    }
  });

  /* Hamburger nav button */
  $mobileNavBtn.on("click", function (evnt) {
    

    if ($mobileNavBtn.attr("aria-expanded") === "true") {
      closeMobileNav();
	if(typeof $annotationBtn!= "undefined")
      $annotationBtn.removeClass("hide");

      $("html, body").animate({ scrollTop: scrollTopPos }, 0);
    } else {
      scrollTopPos = $(window).scrollTop();
      openMobileNav();
	if(typeof $annotationBtn!= "undefined")
      $annotationBtn.addClass("hide");
      modalFocus($mainNav);
    }
    evnt.preventDefault();
  });

  // Mobile Submenu back button
  $subMenuBack.on("click", function (event) {
    $primaryMenu.removeClass("sub-menu-open");
    $mainNav.removeClass("sub-menu-open");
    removeSubmenuTabIndexes();
    event.preventDefault();
  });

  /* Open Close and Init */
  function openMobileNav() {
    $mainNav.addClass("mobile-nav-open");
    $mobileNavBtn.addClass("close").attr("aria-expanded", "true");
    $mobileNavBtn.find(".reader").html("Close site navigation");
    $alertBanner.slideUp("fast");
    /* Scroll lock: disable body scroll, persist scrolling for nav. */
    // noScroll = $(document).scrollTop();
    $("body").addClass("prevent-scroll");
  }

  function closeMobileNav() {
    if ($secondaryMenuItem.is(":visible")) {
      $secondaryMenuItem.fadeOut();
      $mainNav.removeClass("secondary-menu-open");
    } else {
      $mainNav.removeClass("mobile-nav-open");
      $mainNav.removeClass("sub-menu-open");
      $primaryMenu.removeClass("sub-menu-open");
      $mobileNavBtn.removeClass("close").attr("aria-expanded", "false");
      $mobileNavBtn.find(".reader").html("Site navigation");
      removeSubmenuTabIndexes();

      $alertBanner.slideDown();

      setTimeout(function () {
        try {
          calcMargins();
        } catch (e) {
          console.log("Alert banner not present : " + e);
        }
      }, 300);

      $("body").removeClass("prevent-scroll");

      // $("html").scrollTop(noScroll);
    }
  }

  /* Close desktop Nav */
  function closeNav() {
    $primaryMenu.removeClass("sub-menu-open");
    $primaryMenu.find("a.primary").attr("aria-expanded", "false");
    $mainNav.removeClass("sub-menu-open");
-   $navlistItem.attr("aria-expanded", "false");
    removeSubmenuTabIndexes();

    // Add and remove for animation
    $mainNav.addClass("sub-menu-close");
    setTimeout(function () {
      $mainNav.removeClass("sub-menu-close");
    }, 3000);

    $("body").removeClass("prevent-scroll");
  }

  function initMenu() {
    $mainNav.removeClass("mobile-nav-open");
    // $mainNav.addClass('sub-menu-close');
    $mobileNavBtn.removeClass("close").attr("aria-expanded", "false");
    $mobileNavBtn.find(".reader").html("Site navigation");

    $("body").removeClass("prevent-scroll");
  }

  // For Desktop slide bar & Primary Menu Open and Close

  var timeDelay;
  $primaryMenu
    .find("a.primary")
    .bind("mouseenter", function (event) {
      if (timeDelay != null) {
        clearTimeout(timeDelay);
      }
      var $currentMenu = $(this);
      var $hasSubMenuItems = $currentMenu.parent().find(".sub-items-container .nav-sub-items").length;
      timeDelay = setTimeout(function () {
        if ($mainNav.hasClass("mobile-nav-open") && !$primaryMenu.hasClass("sub-menu-open")) {
          event.preventDefault();
        }

        $primaryMenu.removeClass("sub-menu-open");
        $primaryMenu.find("a.primary").attr("aria-expanded", "false");

        $mainNav.removeClass("sub-menu-close");

        if ($hasSubMenuItems) {
          $mainNav.addClass("sub-menu-open");
          $currentMenu.parent().addClass("sub-menu-open");
          $currentMenu.find("a.primary").attr("aria-expanded", "true");
          $navlistItem.attr("aria-expanded", "true");
        } else {
          $mainNav.removeClass("sub-menu-open");
          removeSubmenuTabIndexes();
        }
        $("body").addClass("prevent-scroll");
      }, 500);
    })
    .bind("mouseleave", function (event) {
      if (timeDelay != null) {
        clearTimeout(timeDelay);
        timeDelay = null;
      }
    });

  $primaryMenu.find("a.primary").bind("touchstart", function (event) {
    var $currentMenu = $(this);
    var subMenuItemLength = $currentMenu.parent().find(".sub-items-container .nav-sub-items").length;
    if ($mainNav.hasClass("mobile-nav-open") && $(this).parent().hasClass("has-submenu has-submenu-items") && !$primaryMenu.hasClass("sub-menu-open")) {
      event.preventDefault();
    }

    $primaryMenu.removeClass("sub-menu-open");
    $primaryMenu.find("a.primary").attr("aria-expanded", "false");

    $mainNav.removeClass("sub-menu-close");
    if (subMenuItemLength) {
      $mainNav.addClass("sub-menu-open");

      $(this).parent().addClass("sub-menu-open");
      $(this).find("a.primary").attr("aria-expanded", "true");
    } else {
      $mainNav.removeClass("sub-menu-open");
      removeSubmenuTabIndexes();
    }
    $("body").addClass("prevent-scroll");
  });

  // Added to manage anchored page links in Small Business
  $(window).bind("hashchange", function () {
    closeNav();
  });

  $(window).bind("keyup", function (e) {
    if ($primaryMenu.hasClass("sub-menu-open")) {
      if (e.keyCode === 27) {
        closeNav();
      }
    }
  });

  // Close on overlay click
  $mainNav.find(".nav-hover-overlay").bind("mouseenter", function (event) {
    closeNav();
  });

  $secondaryMenu.bind("focus", function () {
    if ($primaryMenu.hasClass("sub-menu-open")) {
      closeNav();
    }
  });

  // For Keyboard Users

  $primaryMenu.each(function () {
    var linkLabel = $(this).find("a.primary").text();
    var ariaButton =
      '<button class="key-only" aria-haspopup="true" aria-expanded="false"><span class="reader">Show submenu for ' +
      linkLabel +
      "</span></button>";

    $(this).find("a.primary").after(ariaButton);

    $(this).on("click", "button", function (event) {
      $mainNav.removeClass("sub-menu-close sub-menu-open");
      $primaryMenu.removeClass("sub-menu-open");
      $(this).attr("aria-expanded", "false");

      if ($(this).parent().hasClass("has-submenu")) {
        $mainNav.addClass("sub-menu-open");
        $(this).parent().addClass("sub-menu-open");
        $(this).attr("aria-expanded", "true");
        $("body").addClass("prevent-scroll");
        if ($mainNav.hasClass("mobile-nav-open")) {
          $adaSkipLink.attr("tabindex", "-1");
          $('.key-only').attr("tabindex", "-1");
          $("li.has-submenu.has-submenu-items").not(".sub-menu-open").find("a.primary").each(
            function () {
              $(this).attr("tabindex", "-1");
            }
          );

        }
      }
      event.preventDefault();
      //ADA for Sub-nav List
        if($primaryMenu.hasClass("sub-menu-open")) {
         $navlistItem.attr("aria-expanded", "true");
        }
        
    });

  });

  $.fn.isInViewport = function () {
    let elementTop = $(this).offset().top;
    let elementBottom = elementTop + $(this).outerHeight();

    let viewportTop = $(window).scrollTop();
    let viewportBottom = viewportTop + $(window).height();

    return elementBottom > viewportTop && elementTop < viewportBottom;
  };

  $(window).scroll(function () {
    if (window.matchMedia("screen and (min-width: 992px)").matches) {
      var $el = $(".scroll-show");
      // Add New button in nav on scroll
      if ($(this).scrollTop() >= 800) {
        $el.show("fast");
      } else {
        $el.hide("fast");
      }
    }

    var st = window.pageYOffset || document.documentElement.scrollTop;
    if (st > lastScrollTop) {
      // Hide Mega Nav with footer
      if ($("footer.site-footer").isInViewport()) {
        if ($("#site-search")[0] && $("#site-search").is(":hidden")) {
          $("body > header.site-header").slideUp(300);
        } 
        //else {
          //$("body > header.site-header").slideUp(300);
        //}
      }
    } else {
      $("body > header.site-header").slideDown(300);
      try {
        calcMargins();
      } catch (e) {
        console.log("Alert banner not present : " + e);
      }
    }
    lastScrollTop = st <= 0 ? 0 : st;
  });

  // Screen Modal takeover approach
  // Used for Search

  var $takeover = $(".takeover-screen");

  $(".modal[data-showid]").on("click", function () {
    var $modelToOpen = $("#" + this.dataset.showid);
    $takeover.not($modelToOpen).hide();
    modalFocus($modelToOpen);
    setTimeout(function () {
      $("body > header.site-header").show();
    }, 100);

    $("body").css({ overflow: "hidden" });
    $modelToOpen.stop().fadeIn();
    $(this).attr("aria-expanded", "true");
    setTimeout(function () {
      $takeover.find(".btn-close").focus();
    }, 110);

    $("section.alert-banner").slideUp(function () {
      $("body").removeClass("ab-included");
    });

  });

  // Only for search now, Add a comment if used for any others
  $(".takeover-screen .btn-close").on("click", function () {
    $("body").css({ overflow: "" });
    $takeover.fadeOut();
    // Hide header if clicked from footer search
    try {
      var mainHeight = $("[role='main']").offset().top + $("[role='main']").outerHeight(true);
      var viewHeight = $(window).height();
      if (mainHeight <= viewHeight && mainHeight + 50 > viewHeight) {
        setTimeout(function () {
          $("html, body").animate({ scrollTop: "+=0px" });
        }, 100);
      } else {
        setTimeout(function () {
          $("html, body").animate({ scrollTop: "+=15px" });
        }, 100);
      }
    } catch (e) {
      console.log(e);
    }
    var findButton = $(this).parents().find(".takeover-screen").attr("id");
    $(".modal[data-showid=" + findButton + "]").attr("aria-expanded", "false");
   			setTimeout(function () {
		 		$(".focus-item").focus();
            }, 100);

    $("section.alert-banner").slideDown(function () {
      $("body").addClass("ab-included");
      calcMargins();
    });

  });

  function modalFocus(targetModal) {
    // ADA UPDATE to trap focus inside modal -- start
    var focusableElements =
      'button, input:not([type="hidden"]), a[href], select, textarea, [tabindex]:not([tabindex="-1"])';
    var modal = targetModal[0]; // select the modal by it's id
    var firstFocusableElement = modal.querySelectorAll(focusableElements)[0]; // get first element to be focused inside modal
    var focusableContent = modal.querySelectorAll(focusableElements);
    var lastFocusableElement = focusableContent[focusableContent.length - 1]; // get last element to be focused inside modal
    document.addEventListener("keydown", function (e) {
      let isTabPressed = e.key === "Tab" || e.keyCode === 9;
      if (!isTabPressed) {
        return;
      }
      if (e.shiftKey) {
        if (document.activeElement === firstFocusableElement) {
          lastFocusableElement.focus();
          e.preventDefault();
        }
      } else {
        if (document.activeElement === lastFocusableElement) {
          firstFocusableElement.focus();
          e.preventDefault();
        }
      }
    });
    firstFocusableElement.focus();
    // ADA UPDATE to trap focus inside modal -- end
  }
  try {
    function iOSversion() {
      if (/iP(hone|od|ad)/.test(navigator.platform)) {
        var v = navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
        return [parseInt(v[1], 10), parseInt(v[2], 10), parseInt(v[3] || 0, 10)];
      }
    }

    ver = iOSversion();

    if (ver[0] < 11) {
      $("body").addClass("iOS-10");
    }
  } catch (e) { }
  if ($(".image-bleed-50-50").length > 0) {
    setTimeout(function () {
      checkBleed();
    }, 1000);
  }
  function checkBleed() {
    if (window.matchMedia("screen and (min-width: 992px)").matches) {
      $(".image-bleed-50-50").parent().addClass("image-bleed-50-50-outer");
      if ($(".image-bleed-50-50-outer").length > 0) {
        $(".image-bleed-50-50-outer").removeAttr("style");
        $(".image-bleed-50-50-outer .column").css({ height: "auto" });
      }
      $(".image-bleed-50-50-outer").each(function (index) {
        var imgHeight = $(this).children().not(".image-bleed-50-50").height() + 120;
        var bleedClass = $(this).find(".image-bleed-50-50").parent();
        if (bleedClass.hasClass("full-height") === false) {
          bleedClass.css({ "min-height": imgHeight + "px" });
          $(this).find(".column").css({ height: "100%" });
        } else {
          bleedClass.removeAttr("style");
          $(this).find(".column").removeAttr("style");
        }
      });
    } else {
      if ($(".image-bleed-50-50-outer").length > 0) {
        $(".image-bleed-50-50-outer").removeAttr("style");
        $(".image-bleed-50-50-outer .column").removeAttr("style");
      }
    }
  }
  var isLargerDevice = window.matchMedia("(min-width: 992px)").matches;
  var isIE11Browser = !!window.MSInputMethodContext && !!document.documentMode;
  if (isLargerDevice && isIE11Browser) {
    setTimeout(function () {
      $(".two-column-control .column").css({ height: "100%" });
      $(".hero-50-50.hero-bleed .column").css({ height: "100%" });
      $(".hero_50_50").addClass("IE-height");
      $(".IE-height .column").css({ height: "100%" });
    }, 1000);
  }
  if (isIE11Browser) {
    $(".site-header").addClass("IE-header");
  }

  //TAG MAIN MENU WITH SUB MENU ITEMS
  setTimeout(function () {
    $primaryMenu.find(".sub-items-container").parent().addClass("has-submenu-items");
    if ($(".has-submenu.has-submenu-items").length)
      navigationHoverFocus();
  }, 500);

  function navigationHoverFocus() {
    var $notPrimaryMenu = $(".nav-primary-links > li.has-submenu:not(.has-submenu-items)>a");
    var psCss = document.createElement('style');
    psCss.id = "not-prevent-scroll-css";
    psCss.innerHTML = ".not.prevent-scroll {overflow-y: auto;}";
    if (!document.getElementById("not-prevent-scroll-css")) document.getElementsByTagName("head")[0].appendChild(psCss);

    $notPrimaryMenu.bind("mouseenter", function () {
      $("body").addClass("not").removeClass("prevent-scroll");
    }).bind("mouseleave", function () {
      $("body").removeClass("not prevent-scroll");
    })
  }

  function removeSubmenuTabIndexes() {
    $adaSkipLink.removeAttr("tabindex");
    $('.key-only').removeAttr("tabindex");
    $("li.has-submenu.has-submenu-items a.primary").each(
      function () {
        $(this).removeAttr("tabindex");
      }
    );
  }

  $adaSkipLink.on("click", function () {
    $mainNav.removeClass("mobile-nav-open");
    $mainNav.removeClass("sub-menu-open");
    $primaryMenu.removeClass("sub-menu-open");
  });
  $("[onclick*='openAppSettingTool'], [onclick*='openW4Calculator'], [onclick*='openTaxCalculator'], [onclick*='openProductSelectorTool'], .modal-tool-open, [data-showid='site-search']").on("click", function () {
    $(".focus-item").each(function (index) {
      $(this).removeClass("focus-item");
      $(this).attr("aria-expanded", "false");
    });
    $(this).addClass("focus-item");
    $(this).attr("aria-expanded", "true");
  })
   $("#clambtn").click(function(){      
            $(".ciam-popup").addClass("modalPopover");
            $(this).attr("aria-expanded", true);
             $("body").css({ overflow: "hidden" });
               $("html").addClass("ciamOpen");
          
            if(!document.getElementById('ciamjs')){ 
                $(".modalPopover").addClass("overlay");
                loadScript("/ciam-login/ciam-login.js")
                .then( data  => {
                    console.log("Script loaded successfully", data);
                })
                .catch( err => {
                    console.error(err);
                });
            }
           
        });
        $("#clambtnclose").click(function(){           
                            $("html").removeClass("ciamOpen");
                            $(".ciam-popup").removeClass("modalPopover");
                            $("#clambtn").attr("aria-expanded", false);
                            $("body").css({ overflow: "" });                                                
          });
const loadScript = (FILE_URL, async = true, type = "text/javascript") => {
    return new Promise((resolve, reject) => {
        try {
            const scriptEle = document.createElement("script");
            scriptEle.type = type;
            scriptEle.async = async;
            scriptEle.src = location.origin + FILE_URL;
            scriptEle.id = 'ciamjs';
            scriptEle.addEventListener("load", (ev) => {
                resolve({ status: true }); 
                setTimeout(() => {
                    $(".modalPopover").removeClass("overlay");
                    }, 5000)
            });
            scriptEle.addEventListener("error", (ev) => {
                reject({
                    status: false,
                    message: `Failed to load the script`
                });
            });
            document.body.appendChild(scriptEle);
        } catch (error) {
            reject(error);
        }
    });
};
         var jsonCommCompTag = document.getElementById('ciamElmnt');
            if (jsonCommCompTag) {        
                jsonCommCompTag.addEventListener('serviceData', function (event) {
           var evtDetails = event;
            var params = evtDetails.detail.code;
            var appName = $("#ciamElmnt").attr('data-value'); 
             window.open(appName + '?code=' + params, "_self");
                });
            }
});

var alertHeight = "";
var navHeight = "";
var isBannerClosed = null;
var bannerArray = [];

function calcMargins() {
  if($("body").hasClass("brandnav-included")) {
    alertHeight = $("section.alert-banner").height() + $(".brand-navigation").height();
    navHeight = $("header.site-header .main-nav-container").height();
  
    $("header.site-header .main-nav-container").css("margin-top", alertHeight);
    $("main[role=main]").css("padding-top", alertHeight + navHeight);
  } else {
    alertHeight = $("section.alert-banner").height();
    navHeight = $("header.site-header .main-nav-container").height();
  
    $("header.site-header .main-nav-container").css("margin-top", alertHeight);
    $("main[role=main]").css("padding-top", alertHeight + navHeight);
  }
}

$(function () {
  function checkBrandnav() {
    if($(".brand-navigation").length > 0) {
      $("section").each(function() { 
        if($(this).hasClass("brand-navigation")) {
          $("body").addClass("brandnav-included");
          calcMargins();
          $(this).removeClass("hide-content");
        } 
      });
    }
  }
  setTimeout(function () {
    checkBrandnav();
  }, 5000);
  function setBannerStatus() {
    if (sessionStorage && sessionStorage.getItem("alertBannerStatus")) {
      bannerArray = JSON.parse(sessionStorage.getItem("alertBannerStatus"));
      bannerArray.forEach(function (element, index, array) {
        if ("true" == element.isClosed) {
          var idOfBanner = "#" + element.bannerId;
          removeAlertBanner(idOfBanner);
        } else {
          // showAlertBanner();
          //TODO leaving as closed banner is removing
        }
      });
    } else {
      // showAlertBanner();
    }
    setTimeout(function () {
      checkBrandnav();
    }, 500);
    //calling this here as we are removing the already closed banners prior to this
    showAlertBanner();
    
  }
  setBannerStatus();
  function showAlertBanner() {
    $("section.alert-banner").slideDown(function () {
      $("body").addClass("ab-included");
      calcMargins();
    });
  }
  function removeAlertBanner(idBanner) {
    var $bannerToRemove = $(idBanner).parents(".alert-banner");
    $bannerToRemove.slideUp(function () {
      $bannerToRemove.remove();
      if ($("section.alert-banner").length == 0) {
        $("body").removeClass("ab-included");
        $("header.site-header .main-nav-container").removeAttr("style");
        $("main[role=main]").removeAttr("style");
      }
      calcMargins();
    });
  }


  $(".alert-close").on("click", function () {
    var bannerId = $(this).attr("id");
    removeAlertBanner("#" + bannerId);
    bannerArray = JSON.parse(sessionStorage.getItem("alertBannerStatus"));
    var obj = {
      bannerId: bannerId,
      isClosed: "true",
    };
    if (bannerArray && bannerArray.length) {
      var ids = [];
      bannerArray.forEach(function (element, index, array) {
        if (element.hasOwnProperty("bannerId")) {
          ids.push(element.bannerId);
        }
      });
      bannerIndex = ids.indexOf(bannerId);
      if (bannerIndex > 1 && bannerArray[bannerIndex].hasOwnProperty("isClosed")) {
        bannerArray[bannerIndex].isClosed = "true";
      } else {
        bannerArray.push(obj);
      }
    } else {
      bannerArray = [];
      bannerArray.push(obj);
    }
    sessionStorage.setItem("alertBannerStatus", JSON.stringify(bannerArray));
  });

  $(window).on("resize", function () {
    calcMargins();
  });

  var $accordionAlertTitle = $(".alert-banner .accordion-title");
  var $accordionAlertContent = $(".alert-banner .accordion-content");

  $(".alert-banner [data-showid]").on("click", function () {
    var $box = $("#" + this.dataset.showid);

    if ($(this).hasClass("open")) {
      $box.stop().slideUp("fast");
      $(this).attr("aria-expanded", false);
      $(this).find(".icon-caret").removeClass("up");
      $(this).removeClass("open");
    } else {
      $box.stop().slideDown("fast");
      $(this).attr("aria-expanded", true);
      $(this).find(".icon-caret").addClass("up");
      $(this).addClass("open");
    }
  });

  $(window).scroll(function () {
    if($(".brand-navigation").length > 0) {
      var scrollvalue = $(window).scrollTop();
      if (scrollvalue >= 5) {     
          $("body").removeClass("brandnav-included");
          $(".brand-navigation").slideUp("fast", function() {
           calcMargins();
         });
      } else {
         $("body").addClass("brandnav-included");
         $(".brand-navigation").removeClass("hide-content");
         $(".brand-navigation").slideDown("fast",  function() {
           calcMargins();
         });     
      }
    }
    if ($accordionAlertContent.is(":visible")) {
      $accordionAlertContent.slideUp("fast");
      $accordionAlertTitle.removeClass("open");
      $accordionAlertTitle.find(".icon-caret").removeClass("up");
    }
  });
});


$(window).on("load", function (e) {
	var isLarge = window.matchMedia("(min-width: 992px)").matches;
    var isIE11 = !!window.MSInputMethodContext && !!document.documentMode;
    if(isLarge && isIE11) {
    	setTimeout(function(){
    		$(".content-two-column .column").css({"height": "100%"});
        }, 1000);
    }
});

