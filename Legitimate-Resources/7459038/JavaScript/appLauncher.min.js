(function () {
  var ConsumerConnectApps;
  try {
    var LOAN_APP_URL = ((document.querySelector('meta[name="loan-app-url"]') || {}).content || '');
    var ENV_REF_URL_GA4 = LOAN_APP_URL;
    var BORROWER_PORTAL_URL = ((document.querySelector('meta[name="borrower-portal-url"]') || {}).content || '');
    var PAGE_CONTAINER_SELECTOR = 'body > .template-container';
    var LOGIN_BTN_ID = '#template-navigation-link-login';
    var APPLY_BTN_CLASS_NAME_CLASS_NAME = '.apply-now-button';
    var CONSULT_FORM_SUBMIT_BTN_CLASS_NAME = '.consultation-widget-submit-btn';
    var lastFocusedTarget;
    var applyNowLoginBtn = document.querySelectorAll(APPLY_BTN_CLASS_NAME_CLASS_NAME + ', ' + LOGIN_BTN_ID);

    Array.prototype.forEach.call(applyNowLoginBtn, function (applyNowLoginBtnItem) {
      applyNowLoginBtnItem.addEventListener('click', function (evnt) {
        if (isCookieDisabled()) lastFocusedTarget = evnt.target
      });
    });
    var consultFormSubmitBtn = document.querySelectorAll(CONSULT_FORM_SUBMIT_BTN_CLASS_NAME);
    Array.prototype.forEach.call(consultFormSubmitBtn, function (consultFormSubmitBtnItem) {
      consultFormSubmitBtnItem.addEventListener('click', function (event) {
        lastFocusedTarget = event.target;
      });
    });
    var getEmRefresh = function (src) {
      var TYPE_RELOAD = 1
      var EM_REFRESH
      try {
        EM_REFRESH = window.sessionStorage.getItem('EM_REFRESH')
        if (
          window.performance.navigation.type === TYPE_RELOAD &&
          EM_REFRESH !== null
        ) {
          EM_REFRESH = JSON.parse(EM_REFRESH)
          src = EM_REFRESH.path + (EM_REFRESH.search || '')
        }
      } catch (e) {
        console.error('unable to retrieve EM_REFRESH session storage')
        window.ConsumerConnectApps.hideOrShowPageBody(true)
      }
      return src
    }


    // Temporary method to remove domain from iframe urls.
    // For SAMEORIGIN on x-frame-options header.
    var parseUrl = function (url) {
      var parser = document.createElement('a');
      var searchObject = {};
      var queries, split, i;
      // Let the browser do the work
      parser.href = url;
      // Convert query string to object
      queries = parser.search.replace(/^\?/, '').split('&');
      for (i = 0; i < queries.length; i++) {
        split = queries[i].split('=');
        searchObject[split[0]] = split[1];
      }
      return {
        protocol: parser.protocol,
        host: parser.host,
        hostname: parser.hostname,
        port: parser.port,
        pathname: (parser.pathname[0] !== '/' ? '/' : '') + parser.pathname, // IE 11 does not add '/' to the beginning
        search: parser.search,
        searchObject: searchObject,
        hash: parser.hash
      };
    };
    var hostArr = parseUrl(BORROWER_PORTAL_URL).host.split('.');
    var ENV = hostArr[0];
    if (hostArr.length === 5) {
      ENV = ENV + '-' + hostArr[1];
    }
    document.cookie = 'ENV=' + ENV + '; expires=Fri, 31 Dec 9999 23:59:59 GMT';
    document.cookie = 'ENV=' + ENV + '; expires=Fri, 31 Dec 9999 23:59:59 GMT;path=/;SameSite=None;Secure';
    if (/oldLoanApp=1/.test(document.location.search)) {
      LOAN_APP_URL = parseUrl(LOAN_APP_URL).pathname + (LOAN_APP_URL.match(/#$/) ? '#' : '');
      BORROWER_PORTAL_URL = parseUrl(BORROWER_PORTAL_URL).pathname;
    } else {
      LOAN_APP_URL = '/loan-app/' // JCD: Load in new loan app.
      BORROWER_PORTAL_URL = '/borrower-app/' // JCD: load in new borrower app.
    }

    var jqueryDefer = function (callback) {
      if (window.jQuery) {
        callback();
      } else {
        setTimeout(function () { jqueryDefer(callback) }, 500);
      }
    };

    var loadStaticGlobalsJSON = function() {      
      var staticGlobalsJSONURL = '/loan-app/StaticGlobals.json';
      $.getJSON(staticGlobalsJSONURL).done(function(res) {
        staticGlobalsJSON = res;        
      });
    }
  
    jqueryDefer(loadStaticGlobalsJSON);

    var templateCache;
    var mergeDataWithTemplate = function (model, templateString) {
      var res = templateString
      // merge data with template
      for (var property in model) {
        res = res.replace(new RegExp('{' + property + '}', 'g'), model[property])
      }
      return res
    }
    var loadTemplate = function (templateUrl, model, callback) {
      if (!templateCache) {
        // defer until jquery is loaded successfully
        jqueryDefer(function () {
          $.get({ url: templateUrl, cache: false }, function (data) {
            templateCache = data
            callback(mergeDataWithTemplate(model, templateCache))
          })
        })
      } else {
        callback(mergeDataWithTemplate(model, templateCache))
      }
    }

    var isCookieDisabled = function () {
      var cookieExpiryDate = new Date()
      // cookie will expire in 5 seconds
      cookieExpiryDate.setSeconds(cookieExpiryDate.getSeconds() + 5)
      document.cookie = 'cookie-test=true; expires=' + cookieExpiryDate.toGMTString()
      return (document.cookie.indexOf('cookie-test=true') === -1)
    }

    // This function will return the runtime folder path based on preview or published site mode.
    var getRuntimeFolderPath = function () {
      var urlPathName = window.location.pathname;
      var runtimeFolderpath = './runtime';
      if (urlPathName.indexOf('preview') !== -1) {
        runtimeFolderpath = './../../runtime';
      }
      return runtimeFolderpath
    }

    // load the banner html and inject additional content
    var showBanner = function (type, title, content, timeout) {
      var runtimeFolderpath = getRuntimeFolderPath();
      loadTemplate(runtimeFolderpath + '/banner/banner.html', {
        type: type,
        title: title,
        titleClass: !title ? 'empty-title' : '',
        body: content,
        runtimeFolderpath: runtimeFolderpath
      }, function (content) {
        $('#banner').remove();
        var el = $('<div id="banner"></div>');
        $(document.body).prepend(el);
        $(el).html(content);
        ConsumerConnectApps.injectedComponent.banner.onHide = function () {
          if (lastFocusedTarget) lastFocusedTarget.focus();
        }
        // hide banner after given timeout if provided
        if (timeout) {
          setTimeout(function () {
            ConsumerConnectApps.injectedComponent.banner.hide();
          }, timeout);
        }
        // show banner
        ConsumerConnectApps.injectedComponent.banner.show();
      })
    }

    // hide the banner
    var hideBanner = function () {
      if ($('#banner').length > 0) {
        ConsumerConnectApps.injectedComponent.banner.hide();
      }
    }

    // load cookie disbled banner and show
    var showCookieDisabledBanner = function () {
      var bannerType = 'info';
      var title = 'Our site uses cookies';
      var content = 'You currently have cookies disabled.<br/><br/>To continue, first enable cookies in your browser settings and then refresh the page.';
      showBanner(bannerType, title, content);
    }

    // This function will return site id from query params.
    var getSiteIdFromQueryParams = function () {
      var queryParams = window.ConsumerConnectApps.getQueryParameters();
      return queryParams.get('siteid') || queryParams.get('siteId')
    }

    ConsumerConnectApps = {
      loadMapWidgetSrc: function () {
        if (this.isCMSSite()) {
          var mapElementList = document.querySelectorAll('.map-widget-container iframe')
          if (mapElementList) {
            for (var i = 0; i < mapElementList.length; i++) {
              if (!mapElementList[i].src) {
                mapElementList[i].src = mapElementList[i].dataset.src;
              }
            }
          }
        }
      },
      hideOrShowPageBody: function (show) {
        var display = 'none';
        var visibility = 'hidden';
        if (show) {
          display = '';
          visibility = 'visible';
          this.loadMapWidgetSrc()
        }
        var bodyElements = document.querySelectorAll(PAGE_CONTAINER_SELECTOR + ' > :not(.template-footer)');
        Array.prototype.forEach.call(bodyElements, function (notTheFooter) {
          notTheFooter.style.display = display;
          notTheFooter.style.visibility = visibility;
        });
      },
      isIOSDevice: function () {
        const userAgent = navigator ? navigator.userAgent : false
        if (userAgent) {
          return userAgent.indexOf('iPhone') !== -1 ||
            userAgent.indexOf('iPod') !== -1 ||
            userAgent.indexOf('iPad') !== -1
        }
        return false
      },
      showBanner: function (type, title, content, timeout) {
        showBanner(type, title, content, timeout);
      },
      hideBanner: function () {
        hideBanner();
      },
      openApplication: function (options) {
        // check is cookie enabled
        if (isCookieDisabled()) {
          showCookieDisabledBanner()
          this.hideOrShowPageBody(true)
          return
        }
        /*
          * isInitialLoad is null when borrower clicks a button to launch App
          * if Launcher app by URL, isInitialLoad will be true
        * */
        if (!options.isInitialLoad) {
          // launch app from apply now or login should always clear previous session
          window.sessionStorage.clear();
        }
        window.location.href = options.src;
      },
      callOnEnter: function (event, handler) {
        if (event.keyCode === 13) {
          handler.apply(this, Array.prototype.slice.call(arguments, 2));
        }
      },
      // NGCC-58899 : Fixed Order of the params used in apply now button widget.
      // isDeprecated param is required to avoid all site republish so, this way it does not impact on existing published site.
      openLoanApp: function (siteId, loanAppRecipient, isInitialLoad, isDeprecated, workFlowId, action, appId, transactionId, customParameter) {
        var src = LOAN_APP_URL + '?siteId=' + siteId;
        src = getEmRefresh(src)
        if (loanAppRecipient) {
          src += '&lar=' + loanAppRecipient;
        }
        if (appId) {
          src += '&appid=' + appId;
        }
        if (workFlowId) {
          src += '&workFlowId=' + workFlowId;
        }
        if (action) {
          src += '&action=' + action;
        }
        if (transactionId) {
          src += '&id=' + transactionId;
        }
        if (customParameter) {
          src += '&customParameter=' + customParameter;
        }
        var options = {
          src: src,
          type: 'loanapp',
          isInitialLoad: isInitialLoad
        };
        this.openApplication(options);
      },
      openBorrowerPortal: function (siteId, isInitialLoad, workFlowId) {
        // we add fromLogin=true for all login buttons/links except openBorrowerPortal call from Initial Load
        var params = '?siteId=' + siteId + (workFlowId ? '&workFlowId=' + workFlowId : '') + (!isInitialLoad ? '&fromLogin=true' : '');
        var src = BORROWER_PORTAL_URL + params
        src = getEmRefresh(src)

        var options = {
          src: src,
          type: 'borrowerportal',
          isInitialLoad: isInitialLoad
        };
        this.openApplication(options);
      },
      openBorrowerPortalInviteLink: function (queryString, isInitialLoad) {
        var src = BORROWER_PORTAL_URL + queryString
        src = getEmRefresh(src)
        var options = {
          src: src,
          type: 'borrowerportal',
          isInitialLoad: isInitialLoad
        };
        this.openApplication(options);
      },
      openBorrowerPortalAuthPage: function (queryString, isInitialLoad) {
        var src = BORROWER_PORTAL_URL + queryString
        src = getEmRefresh(src)
        var options = {
          src: src,
          type: 'borrowerportal',
          isInitialLoad: isInitialLoad
        };
        this.openApplication(options);
      },
      openBorrowerPortalUserSecurityPage: function (queryString, isInitialLoad) {
        var src = BORROWER_PORTAL_URL + '#/security' + queryString
        src = getEmRefresh(src)
        var options = {
          src: src,
          type: 'borrowerportal',
          isInitialLoad: isInitialLoad
        };
        this.openApplication(options);
      },
      getQueryParameters: function (str) {
        return new URLSearchParams(str || document.location.search);
      },
      loadAppFromQueryParams: function () {
        var queryParams = window.ConsumerConnectApps.getQueryParameters();
        var siteId = getSiteIdFromQueryParams();
        var decodedQueryString = decodeURIComponent(document.location.search);
        var queryString = encodeURI(decodedQueryString);
        if (queryParams.has('loanapp')) {
          window.ConsumerConnectApps.openLoanApp(siteId, queryParams.get('lar'), true, false, queryParams.get('workFlowId'), queryParams.get('action'), queryParams.get('appid'), queryParams.get('id'), queryParams.get('customParameter'));
        } else if (queryParams.has('borrowerportal')) {
          window.ConsumerConnectApps.openBorrowerPortal(siteId, true);
        } else if (queryParams.has('ecc-remind')) {
          window.ConsumerConnectApps.openBorrowerPortal(siteId, true);
        } else if (queryParams.has('resetpassword') || queryParams.has('forgetusername')) {
          window.ConsumerConnectApps.openBorrowerPortalUserSecurityPage(queryString, true);
        } else if (queryParams.has('authentication')) {
          window.ConsumerConnectApps.openBorrowerPortalAuthPage(queryString, true);
        } else if (queryParams.has('ecc-invite') && queryParams.has('entryPassId')) {
          window.ConsumerConnectApps.openBorrowerPortalInviteLink(queryString, true);
        } else {
          window.ConsumerConnectApps.hideOrShowPageBody(true)
        }
      },
      isCMSSite: function () {
        var queryParams = window.ConsumerConnectApps.getQueryParameters();
        return ['loanapp', 'borrowerportal', 'ecc-invite', 'ecc-remind', 'authentication', 'resetpassword', 'forgetusername'].filter(
          function (param) { return queryParams.has(param); }).length === 0;
      },
      setCMSFocusToMainContainer: function () {
        setTimeout(function () {
          if (window.ConsumerConnectApps.isCMSSite()) {
            const mainContainer = document.getElementById('CMS-main-container')
            if (mainContainer) {
              mainContainer.focus({ preventScroll: true })
            }
          }
        }, 200);
      },
      isIEBrowser: function () {
        var userAgent = window.navigator.userAgent;
        return userAgent ? userAgent.indexOf('Trident/') > -1 : false;
      },
      // NGCC-39364 | Preventing page jumps to the top in IE due to getting repainted on image load.
      setScrollPosition: function () {
        if (window.ConsumerConnectApps.isIEBrowser() && window.ConsumerConnectApps.isCMSSite()) {
          setTimeout(function () {
            var urlString = encodeURI(window.location.href);
            if (urlString.indexOf('#') > -1) {
              window.location.href = urlString;
            }
          }, 200);
        }
      }
    };

    window.ConsumerConnectApps = ConsumerConnectApps;

    var loadNewGA4Script = function loadNewGA4Script() {
      var hostArr = parseUrl(ENV_REF_URL_GA4).host.split('.');
      var GA4_ID = 'G-QS7HNGH53Z';
      var newScriptTag = document.createElement('script');

      if (hostArr[0] === 'stg' || hostArr[0] === 'concept') {
        GA4_ID = 'G-YRFZ9MZV85';
      } else if (hostArr[0] === 'prod') {
        GA4_ID = 'G-QT71YPX2HL';
      }
      
      newScriptTag.src = 'https://www.googletagmanager.com/gtag/js';
      newScriptTag.onload = function () {
        var pathName = (window.location.pathname === '/') ? 'Home Page' : window.location.pathname;
        window.dataLayer = window.dataLayer || [];
        window.gtag = function(){dataLayer.push(arguments);}
        window.gtag('js', new Date());
        window.gtag('config', GA4_ID);
        window.gtag('event', 'page_view', { page_path:pathName});
      }
      document.body.append(newScriptTag);
    }

    window.onload = function () { 
      window.ConsumerConnectApps.setScrollPosition(); 
      loadNewGA4Script() // Load New GA4 Script Dynamically.
    };

    window.onpopstate = function (evt) {
      var state = evt.state;
      if (!state) return;
      window.ConsumerConnectApps.openApplication({ id: state.appId, src: state.appSrc, type: state.type, isInitialLoad: true });
    };

    if (document.readyState === 'complete') {
      window.ConsumerConnectApps.loadAppFromQueryParams();
    } else {
      document.addEventListener('DOMContentLoaded', window.ConsumerConnectApps.loadAppFromQueryParams);
    }

    document.onreadystatechange = function () {
      if (document.readyState === 'complete') {
        window.ConsumerConnectApps.setCMSFocusToMainContainer();
      }
    }
  } catch (exception) {
    ConsumerConnectApps.hideOrShowPageBody(true)
    console.error(exception)
  }
}());
