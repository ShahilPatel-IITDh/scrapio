.mfp-hide{display:none!important}[class^=icon-],[class*=" icon-"]{font-family:"icomoon"!important;speak:none;font-style:normal;font-weight:400;font-variant:normal;text-transform:none;line-height:1;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.icon-close:before{content:"î¤¬"}.icon-cube-4:before{content:"î¤ª";color:#6fc0bc}.icon-cube-2:before{content:"î¤"}.icon-arrow:before{content:"î¤";color:#6ebdb9}.icon-loupe:before{content:"î¤"}.icon-benefit-1:before{content:"î¤"}.icon-benefit-2:before{content:"î¤"}.icon-benefit-3:before{content:"î¤"}.icon-benefit-4:before{content:"î¤"}.icon-benefit-5:before{content:"î¤"}.icon-benefit-6:before{content:"î¤"}.icon-cube:before{content:"î¤";color:#6fc0bc}.icon-nav:before{content:"î¤"}.icon-phone:before{content:"î¤";color:#abff56}.icon-social-fb:before{content:"î¤";color:#fff}.icon-social-in:before{content:"î¤";color:#fff}.icon-social-yt:before{content:"îª";color:#fff}.icon-step-1:before{content:"î¤"}.icon-step-2:before{content:"î¤"}.icon-step-3:before{content:"î¤"}.icon-step-4:before{content:"î¤"}.icon-step-5:before{content:"î¤"}.icon-triang:before{content:"î¤";color:#fff}.slick-slider{position:relative;display:block;box-sizing:border-box;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-touch-callout:none;-khtml-user-select:none;-ms-touch-action:pan-y;touch-action:pan-y;-webkit-tap-highlight-color:transparent}.slick-list{position:relative;display:block;overflow:hidden;margin:0;padding:0}.slick-list:focus{outline:0}.slick-list.dragging{cursor:pointer;cursor:hand}.slick-slider .slick-track,.slick-slider .slick-list{-webkit-transform:translate3d(0,0,0);-moz-transform:translate3d(0,0,0);-ms-transform:translate3d(0,0,0);-o-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}.slick-track{position:relative;top:0;left:0;display:block;margin-left:auto;margin-right:auto}.slick-track:before,.slick-track:after{display:table;content:""}.slick-track:after{clear:both}.slick-loading .slick-track{visibility:hidden}.slick-slide{display:none;float:left;height:100%;min-height:1px}[dir=rtl] .slick-slide{float:right}.slick-slide img{display:block}.slick-slide.slick-loading img{display:none}.slick-slide.dragging img{pointer-events:none}.slick-initialized .slick-slide{display:block}.slick-loading .slick-slide{visibility:hidden}.slick-vertical .slick-slide{display:block;height:auto;border:1px solid transparent}.slick-arrow.slick-hidden{display:none}[data-aos][data-aos][data-aos-delay="50"],body[data-aos-delay="50"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="100"],body[data-aos-delay="100"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="150"],body[data-aos-delay="150"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="200"],body[data-aos-delay="200"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="250"],body[data-aos-delay="250"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="300"],body[data-aos-delay="300"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="350"],body[data-aos-delay="350"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="400"],body[data-aos-delay="400"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="450"],body[data-aos-delay="450"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="500"],body[data-aos-delay="500"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="550"],body[data-aos-delay="550"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="600"],body[data-aos-delay="600"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="650"],body[data-aos-delay="650"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="700"],body[data-aos-delay="700"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="750"],body[data-aos-delay="750"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="800"],body[data-aos-delay="800"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="850"],body[data-aos-delay="850"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="900"],body[data-aos-delay="900"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="950"],body[data-aos-delay="950"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1000"],body[data-aos-delay="1000"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1050"],body[data-aos-delay="1050"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1100"],body[data-aos-delay="1100"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1150"],body[data-aos-delay="1150"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1200"],body[data-aos-delay="1200"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1250"],body[data-aos-delay="1250"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1300"],body[data-aos-delay="1300"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1350"],body[data-aos-delay="1350"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1400"],body[data-aos-delay="1400"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1450"],body[data-aos-delay="1450"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1500"],body[data-aos-delay="1500"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1550"],body[data-aos-delay="1550"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1600"],body[data-aos-delay="1600"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1650"],body[data-aos-delay="1650"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1700"],body[data-aos-delay="1700"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1750"],body[data-aos-delay="1750"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1800"],body[data-aos-delay="1800"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1850"],body[data-aos-delay="1850"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1900"],body[data-aos-delay="1900"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="1950"],body[data-aos-delay="1950"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2000"],body[data-aos-delay="2000"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2050"],body[data-aos-delay="2050"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2100"],body[data-aos-delay="2100"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2150"],body[data-aos-delay="2150"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2200"],body[data-aos-delay="2200"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2250"],body[data-aos-delay="2250"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2300"],body[data-aos-delay="2300"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2350"],body[data-aos-delay="2350"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2400"],body[data-aos-delay="2400"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2450"],body[data-aos-delay="2450"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2500"],body[data-aos-delay="2500"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2550"],body[data-aos-delay="2550"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2600"],body[data-aos-delay="2600"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2650"],body[data-aos-delay="2650"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2700"],body[data-aos-delay="2700"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2750"],body[data-aos-delay="2750"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2800"],body[data-aos-delay="2800"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2850"],body[data-aos-delay="2850"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2900"],body[data-aos-delay="2900"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="2950"],body[data-aos-delay="2950"] [data-aos]{transition-delay:0}[data-aos][data-aos][data-aos-delay="3000"],body[data-aos-delay="3000"] [data-aos]{transition-delay:0}[data-aos^=fade][data-aos^=fade]{opacity:0;transition-property:opacity,transform}[data-aos^=fade][data-aos^=fade].aos-animate{opacity:1;transform:translateZ(0)}[data-aos=fade-up]{transform:translate3d(0,100px,0)}
/*! normalize.css v3.0.2 | MIT License | git.io/normalize */
html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,hgroup,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block;vertical-align:baseline}audio:not([controls]){display:none;height:0}[hidden],template{display:none}a{background-color:transparent}a:active,a:hover{outline:0}abbr[title]{border-bottom:1px dotted}b,strong{font-weight:700}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sup{top:-.5em}sub{bottom:-.25em}img{border:0}svg:not(:root){overflow:hidden}figure{margin:1em 40px}hr{-moz-box-sizing:content-box;box-sizing:content-box;height:0}pre{overflow:auto}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}button,input,optgroup,select,textarea{color:inherit;font:inherit;margin:0}button{overflow:visible}button,select{text-transform:none}button,html input[type=button],input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer}button[disabled],html input[disabled]{cursor:default}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}input{line-height:normal}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0}input[type=number]::-webkit-inner-spin-button,input[type=number]::-webkit-outer-spin-button{height:auto}input[type=search]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{border:0;padding:0}textarea{overflow:auto}optgroup{font-weight:700}table{border-collapse:collapse;border-spacing:0}td,th{padding:0}:root{--blue:#007bff;--indigo:#6610f2;--purple:#6f42c1;--pink:#e83e8c;--red:#dc3545;--orange:#fd7e14;--yellow:#ffc107;--green:#28a745;--teal:#20c997;--cyan:#17a2b8;--white:#fff;--gray:#6c757d;--gray-dark:#343a40;--primary:#007bff;--secondary:#6c757d;--success:#28a745;--info:#17a2b8;--warning:#ffc107;--danger:#dc3545;--light:#f8f9fa;--dark:#343a40;--breakpoint-xs:0;--breakpoint-sm:576px;--breakpoint-md:768px;--breakpoint-lg:992px;--breakpoint-xl:1270px;--font-family-sans-serif:-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";--font-family-monospace:SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace}html{font-family:sans-serif;line-height:1.15;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%;-ms-overflow-style:scrollbar;-webkit-tap-highlight-color:transparent}article,aside,dialog,figcaption,figure,footer,header,hgroup,main,nav,section{display:block}body{margin:0;font-family:-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol";font-size:1rem;font-weight:400;line-height:1.5;color:#212529;text-align:left;background-color:#fff}h1,h2,h3,h4,h5,h6{margin-top:0;margin-bottom:.5rem}p{margin-top:0;margin-bottom:1rem}address{margin-bottom:1rem;font-style:normal;line-height:inherit}ol,ul,dl{margin-top:0;margin-bottom:1rem}a{color:#007bff;text-decoration:none;background-color:transparent;-webkit-text-decoration-skip:objects}a:hover{color:#0056b3;text-decoration:underline}img{vertical-align:middle;border-style:none}table{border-collapse:collapse}label{display:inline-block;margin-bottom:.5rem}button{border-radius:0}input,button,select,optgroup,textarea{margin:0;font-family:inherit;font-size:inherit;line-height:inherit}button,input{overflow:visible}button,select{text-transform:none}button,html [type=button],[type=reset],[type=submit]{-webkit-appearance:button}input[type=radio],input[type=checkbox]{box-sizing:border-box;padding:0}h1,h2,h3,h4,h5,h6,.h1,.h2,.h3,.h4,.h5,.h6{margin-bottom:.5rem;font-family:inherit;font-weight:500;line-height:1.2;color:inherit}h1,.h1{font-size:2.5rem}h2,.h2{font-size:2rem}h3,.h3{font-size:1.75rem}h4,.h4{font-size:1.5rem}h5,.h5{font-size:1.25rem}html{font-size:.625rem;min-height:100%;font-family:"Poppins",sans-serif;font-weight:400}body{line-height:1.86;font-size:1.5rem;color:#54565a;font-family:"Poppins",sans-serif;transition:.2s}html,body{height:100%}input,textarea{-webkit-appearance:none;border-radius:0}h1,h2,h3,h4,h5,h6{margin:0}h1{font-size:34px;color:#000;letter-spacing:-1.24679px;line-height:1.35;font-weight:600;margin-bottom:21px}h2{font-size:16px;letter-spacing:-.13838px;font-weight:600;color:#366d66;padding-bottom:15px;position:relative;margin-bottom:10px}h2.light-green{color:#6fc0bc}h2.light-green:after{background:#6fc0bc}h2:after{display:block;content:"";position:absolute;left:0;bottom:0;width:50px;height:3px;background:#366d66}h3{font-size:34px;color:#000;letter-spacing:-1.24679px;line-height:1.35;font-weight:600;margin-bottom:21px}h4{font-size:20px}p{font-size:16px;line-height:1.5;margin-bottom:24px;margin-top:24px;text-align:justify}img{max-width:100%;height:auto}.btn-more{position:relative;display:inline-flex;align-items:center;font-weight:700;font-size:15px;line-height:1.2;text-align:center;color:#000;transition:.3s;padding-bottom:9px}.btn-more:after{content:"î¤";font-family:"icomoon";font-size:8px;margin-left:8px}.btn-more:before{display:block;content:"";position:absolute;left:0;right:0;bottom:0;height:3px;background:#6fc0bc}.center{display:table;margin-left:auto;margin-right:auto}ul{padding-left:15px;margin-bottom:30px}ul li{margin-bottom:14px;font-size:15px;line-height:1.7;word-break:break-word}@media (min-width:768px){h2{margin-bottom:14px}}@media (max-width:360px){h3{font-size:30px}}@media (max-width:767px){.container{max-width:none!important}}#page-header{padding-top:14px;padding-bottom:16px;position:fixed;top:0;z-index:10;left:0;right:0;background:#fff}#page-header .page-header-inner{display:flex;justify-content:space-between;align-items:center}#page-header .page-header-inner .logo{position:relative;display:inline-block}#page-header .page-header-inner .logo img{width:100%;max-width:20.2vw}#page-header .page-header-inner .logo .logo-note{position:absolute;left:83%;top:-17%;font-size:1rem;background:rgba(70,195,207,.1);color:#46c3cf;line-height:1;padding:4px 6px 4px 16px;font-weight:500;transition:.3s}#page-header .page-header-inner .logo .logo-note:before{position:absolute;display:block;content:"";width:4px;height:4px;border-radius:50%;background:#adff87;left:7px;top:50%;transform:translateY(-50%);transition:.3s}#page-header .page-header-inner .logo .logo-note:after{position:absolute;display:block;content:"";left:6px;top:100%;width:0;height:0;border-style:solid;border-width:6px 3px 0 3px;border-color:#ecf9fa transparent transparent transparent}#page-header .page-header-inner .btn-nav{padding:10px;display:flex;align-items:center;margin-right:-10px}#page-header .page-header-inner .btn-nav .icon{font-size:20px}#page-header .page-header-inner .switch-lang{display:flex;align-items:center;margin:0 auto}#page-header .page-header-inner .switch-lang .switch{transform:scale(1.15)}#page-header .page-header-inner .side{position:fixed;top:0;left:100%;width:100%;overflow:auto;min-height:100vh;display:flex;flex-wrap:wrap;padding-top:70px;align-items:center;background:#fff;z-index:999;justify-content:center;transition:.3s;padding-bottom:30px;-webkit-overflow-scrolling:touch;bottom:0}#page-header .page-header-inner .side #close-nav{position:absolute;top:25px;right:15px;border:1px solid #000;width:30px;height:30px;display:flex;align-items:center;justify-content:center;border-radius:4px}#page-header .page-header-inner .side .main-nav{overflow:auto;padding-bottom:70px;width:calc(100% - 30px)}#page-header .page-header-inner .side .main-nav .menu{width:100%;padding-left:0;padding-top:30px;list-style:none}#page-header .page-header-inner .side .main-nav .menu li{text-align:center}#page-header .page-header-inner .side .main-nav .menu li a{color:#000;font-weight:600;font-size:18px}#page-header .page-header-inner .side .main-nav .menu li:last-child a{color:#6fc0bc;position:relative;border:1px solid transparent;padding:0 10px;border-radius:4px;transition:.3s;display:flex;align-items:center;justify-content:center}#page-header .page-header-inner .side .main-nav .menu li:last-child a:before{content:"î¤";font-family:"icomoon";margin-right:14px;font-size:21px}#page-header .page-header-inner .side .main-nav .search-engine{border:1px solid #000;margin-right:16.5%;width:33px;display:flex;height:33px;align-items:center;justify-content:center;background:0 0;border-radius:4px;transition:.3s;margin:0 auto 20px}@media (min-width:768px){#page-header{padding-top:17px;padding-bottom:24px}}#page-footer{padding-top:146px;text-align:center;background:url(/wp-content/themes/dtm/dist/74cc9cbdfdb7d5a64e92.jpg)50%0/cover no-repeat;position:relative}#page-footer .icon-desktop{display:none}#page-footer .logo{margin-bottom:56px}#page-footer .footer-links{margin-bottom:55px}#page-footer .footer-links h5{font-weight:600;font-size:16px;line-height:1.5;text-align:center;letter-spacing:-.0772806px;color:#fff;margin-bottom:15px}#page-footer .footer-links .txt{font-size:14px;line-height:1.7;text-align:center;color:#fff}#page-footer .footer-links .menu{list-style:none;padding-left:0}#page-footer .footer-links .menu li{margin-bottom:5px}#page-footer .footer-links .menu li a{font-size:14px;line-height:1.7;text-align:center;color:#fff;transition:.3s}#page-footer .page-footer-foot{border-top:1px solid #d8d8d8;padding-top:20px;padding-bottom:22px;font-size:14px;line-height:1.5;color:#fff}@media (min-width:992px){#page-footer .icon-desktop{display:block;position:absolute}#page-footer .icon-desktop.icon-desktop-1{left:50%;top:2vw;font-size:115px;transform:translateX(29.4vw)}#page-footer .icon-desktop.icon-desktop-2{left:50%;top:6vw;font-size:30px;transform:translateX(100%)}#page-footer .icon-desktop.icon-desktop-3{left:50%;top:14vw;font-size:30px;transform:translateX(13.4vw)}#page-footer .icon-desktop.icon-desktop-4{left:50%;top:18vw;font-size:30px;transform:translateX(-16.6vw);opacity:.5}}.scene{display:none}.btn{display:inline-flex;align-items:center;font-size:14px;line-height:1.46;text-align:center;padding:13px 15px 14px;color:#fff;font-weight:600;text-transform:uppercase;border:0;border-radius:0;vertical-align:middle;-webkit-transform:perspective(1px) translateZ(0);transform:perspective(1px) translateZ(0);box-shadow:0 0 1px transparent;position:relative;background:#6fc0bc;-webkit-transition-property:color;transition-property:color;-webkit-transition-duration:.3s;transition-duration:.3s;border:2px solid transparent;position:relative;margin-bottom:27px;cursor:pointer}.btn:after{content:"î¤°";font-family:"icomoon";font-size:8px;color:#fff;margin-left:10px;margin-top:-2px}.btn:visited{color:#fff}.btn:before{content:"";position:absolute;z-index:-1;top:0;left:0;right:0;bottom:0;background:#fff;-webkit-transform:scale(0);transform:scale(0);-webkit-transition-property:transform;transition-property:transform;-webkit-transition-duration:.25s;transition-duration:.25s;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out}.count-box{text-align:center;margin-bottom:71px;padding:0 23%}.count-box__num{font-size:50px;line-height:1.5;letter-spacing:-1.24679px;color:#6fc0bc;font-weight:700;margin-bottom:7px}.count-box__txt{font-weight:500;font-size:15px;line-height:1.4;text-align:center;letter-spacing:-.350503px;color:#000}.count-box-extend{background:#fff;box-shadow:0 1.71032px 20px rgba(0,0,0,.05);margin-bottom:18px;padding:30px 30px;min-height:183px;position:relative}.count-box-extend:after{display:block;content:"î¤";font-family:"icomoon";position:absolute;top:16px;right:21px;font-size:18px;line-height:1;color:#6fc0bc}.count-box-extend__num{font-weight:700;font-size:50px;line-height:1;text-align:center;letter-spacing:-1.24679px;color:#1c263d;margin-bottom:22px}.count-box-extend__txt{font-size:15px;line-height:1.53;text-align:center;letter-spacing:.196166px;color:#272727}.styled-block{position:relative;margin-left:-15px;padding-left:65px;margin-bottom:46px}.styled-block:before{display:block;content:"";left:0;width:46px;top:0;bottom:-10px;position:absolute;background:#6fc0bc;margin-right:19px}.testimonial{margin-top:64px}.testimonial__logo{display:block;margin:0 auto 52px;height:32px!important;width:auto!important}.testimonial__quote{font-weight:500;font-style:italic;font-size:18px;line-height:2;text-align:center;color:#fff;margin-bottom:39px}.testimonial__quote:before{content:'"';font-style:italic}.testimonial__quote:after{content:'"';font-style:italic}.testimonial__person .image{display:block;width:53px;height:53px;margin:0 auto;overflow:hidden;border-radius:50%;margin-bottom:17px}.testimonial__person .image img{width:100%;height:100%;object-fit:cover}.testimonial__person .name{font-size:19px;font-family:"aileronregular";font-weight:700;text-transform:uppercase;text-align:center;color:#fff;margin-bottom:16px}.testimonial__person .position{font-family:"aileronregular";font-size:14px;line-height:1.21;text-align:center;color:#fff;margin-bottom:62px}.nav-arrows{display:flex;margin:-10px -15px 0 0}.nav-arrows .icon{display:inline-flex;align-self:flex-start;padding:10px;margin:5px;border:1px solid transparent;border-radius:4px;opacity:1;transition:.3s;cursor:pointer;outline:0}.nav-arrows .icon:first-child{transform:rotate(180deg)}.nav-box{display:flex;justify-content:space-between;margin-bottom:29px}.clients-slider{overflow:hidden;white-space:nowrap;margin-bottom:49px;margin-left:-15px;margin-right:-15px}.clients-slider .item{display:inline-flex!important;align-items:center;padding-right:45px;margin-left:15px;height:36px}.clients-slider .item img{max-height:100%}.clients-slider .slick-track{display:flex;align-items:center}@media (max-width:1270px){.clients-slider .item img{max-height:100%!important}}.benefit{box-shadow:0 1.71032px 30px rgba(0,0,0,.1);margin-bottom:23px;display:flex;flex-wrap:wrap;align-items:center;justify-content:center}.benefit .inner{padding:0 42px;min-height:260px;background:#fff;transition:.4s}.benefit .intro{width:100%;position:relative;transition:.5s ease}.benefit .extend{width:100%;text-align:center}.benefit__icon{position:relative;width:100%;width:75px;height:85px;margin:0 auto 37px}.benefit__icon .icon{position:absolute;top:50%;left:50%;transform:translateX(-50%) translateY(-50%);color:#18202d}.benefit__icon .icon:first-child{font-size:33px}.benefit__icon .icon.icon-cube-2{font-size:85px}.benefit__name{width:100%;font-weight:600;font-size:20px;line-height:1.45;text-align:center;color:#18202d;margin-bottom:24px;transition:.4s}.benefit__txt{width:100%;font-size:15px;line-height:1.6;text-align:center;padding-bottom:32px;color:#18202d;position:relative}.benefit__more{font-weight:700;font-size:1.22;line-height:22px;color:#fff}.benefit .extend{opacity:0}@media (min-width:992px){.benefit{margin-left:7px;margin-right:7px;margin-bottom:39px}.benefit .inner{padding:52px 42px}.benefits .row{padding-left:34px;padding-right:34px}}.achievements-slider{overflow:hidden;white-space:nowrap;display:flex;margin-bottom:45px;margin-left:-15px;margin-right:-15px}.achievements-slider .item{display:inline-block;margin-left:15px}.achievements-slider .item .logo-box{height:116px;display:flex;align-items:center;padding:0 15px;margin-bottom:28px;justify-content:center}.achievements-slider .item .logo-box img{max-height:100%}.achievements-slider .item .name-box{text-align:center}.achievements-slider .item .name-box__bold{padding:0 15px;font-weight:600;font-size:15px;line-height:1.53;text-align:center;letter-spacing:.196166px;color:#272727}.achievements-slider .item .name-box__regular{padding:0 15px;font-size:15px;line-height:1.53;text-align:center;letter-spacing:.196166px;color:#272727}.blog-slider{white-space:nowrap;margin-bottom:55px;display:flex;margin-right:-15px;overflow:hidden}.blog-slider .slick-slide{padding-right:15px}.blog-slider .item{display:inline-block;flex-shrink:0;width:257px;white-space:normal;box-shadow:0 1.71032px 30px rgba(0,0,0,.1)}.blog-slider .item .img-box{height:167px;overflow:hidden}.blog-slider .item .img-box img{width:100%;height:100%;object-fit:cover;transition:.3s;transform:scale(1)}.blog-slider .item .content-box{background:#fff;padding:18px;padding-bottom:29px;text-align:center;transition:.3s}.blog-slider .item .content-box h4{font-weight:600;font-size:20.5238px;line-height:1.42;text-align:center;color:#2c2e30;margin-bottom:16px;text-align:center}.blog-slider .item .content-box p{font-size:15px;line-height:1.6;text-align:center;color:#54565a;overflow:hidden;display:-webkit-box;-webkit-line-clamp:3;-webkit-box-orient:vertical}.panel{max-height:0;overflow:hidden;transition:max-height .2s ease-out;text-align:justify}.white-popup{position:relative;background:#fff;padding:68px 30px 30px;width:auto;max-width:653px;margin:0 auto;background-position:0 50%,100% 50%;background-repeat:no-repeat,no-repeat;box-shadow:0 4px 30px rgba(0,0,0,.13)}.white-popup .popup-columns .column{display:flex;flex-direction:column}.white-popup .popup-columns .column--center{justify-content:center}.white-popup--wide{max-width:1440px;padding:0!important}.white-popup--wide .popup-columns .column .form__row{margin-bottom:24px}.white-popup--wide .form-container{padding:45px 6.4vw 45px 6.4vw;margin-bottom:0;box-shadow:none;max-width:none}.form__row{margin-bottom:38px}.search-engine-mobile{display:block}.search-engine-mobile .search-engine-action{max-width:290px;margin:0 auto}.contact-box{padding:49px 23px 33px;margin-bottom:-83px;position:relative;background:#fff;box-shadow:0 4px 30px rgba(0,0,0,.25);position:relative;z-index:1}.contact-box .header{font-weight:600;font-size:25px;line-height:1.52;letter-spacing:.375px;color:#366d66;margin-bottom:17px}.contact-box__icons{display:flex;margin-bottom:45px}.contact-box__icons .item{display:block;position:relative;width:34px;height:39px;margin-right:11px}.contact-box__icons .item .icon{position:absolute;top:50%;left:50%;transform:translateX(-50%) translateY(-50%);line-height:1}.contact-box__icons .item .icon:first-child{font-size:50px}.contact-box__icons .item .icon:first-child:before{color:#132138;transition:.3s}.contact-box__icons .item .icon.icon-social{font-size:12px;transform:translateX(-50%) translateY(-55%)}.contact-box__person{display:flex;align-items:center;margin-bottom:71px}.contact-box__person .img-box{width:91px;height:91px;flex-shrink:0;margin-right:26px;border-radius:50%}.contact-box__person .img-box img{display:block;width:100%;height:100%;object-fit:cover}.contact-box__person .content-box .name{font-weight:600;font-size:16px;letter-spacing:.375px;color:#040404}.contact-box__person .content-box .position{font-size:15px;letter-spacing:.375px;color:rgba(4,4,4,.5)}.contact-box__person .content-box .phone-number{font-weight:500;font-size:15px;letter-spacing:.257143px;color:#040404;position:relative;transition:.3s}.contact-box__person .content-box .phone-number:before{content:"î¤";font-family:"icomoon";color:#000;margin-right:6px;transition:.3s}.contact-box__actions{text-align:center}.contact-box__actions .button{margin-bottom:11px}.contact-box__actions .button-note{font-weight:500;font-size:12px;text-align:center;letter-spacing:-.350503px;color:#000}@media (max-width:400px){.process .process-steps .btn{padding:10px;font-size:12px}.process .process-steps .period:after{left:-20px}.process .process-steps .period:before{left:-75px}.process .process-steps{padding-left:31px}}.video-container{position:relative;display:table}.video-container .video-button{cursor:pointer;position:absolute;top:50%;left:50%;transform:translateX(-50%) translateY(-50%);text-decoration:none}.video-container .video-button .icon .icon{display:flex;justify-content:center}.video-container .video-button .icon .icon.icon-cube{font-size:93px}.video-container .video-button .icon .icon.icon-triang{position:absolute;left:50%;top:50%;transform:translateX(-40%) translateY(-110%);font-size:23px}.video-container .video-button .txt{background:#fff;font-size:14px;font-weight:500;line-height:1.5;padding:5px 23px;transition:.3s;white-space:nowrap;color:#54565a;text-decoration:none}.form-container{max-width:914px;background:#fff;padding:15px;box-shadow:0 4px 30px rgba(0,0,0,.13);margin-bottom:52px}.about_us{overflow:hidden}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/